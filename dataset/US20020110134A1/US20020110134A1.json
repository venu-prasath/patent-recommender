{
    "patent_link": "https://patents.google.com/patent/US20020110134A1/en",
    "patent_id": "US20020110134A1",
    "title": "Apparatus and methods for scheduling packets in a broadband data stream",
    "abstract": "A packet scheduler includes a packet manager interface, a policer, a congestion manager, a scheduler, and a virtual output queue (VOQ) handler. The policer assigns a priority to each packet. Depending on congestion levels, the congestion manager determines whether to send a packet based on the packet's priority assigned by the policer. The scheduler schedules packets in accordance with configured rates for virtual connections and group shapers. A scheduled packet is queued at a virtual output queue (VOQ) by the VOQ handler. In one embodiment, the VOQ handler sends signals to a packet manager (through the packet manager interface) to instruct the packet manager to transmit packets in a scheduled order.",
    "inventors": [
        "Glenn Gracon",
        "Murray Bowles",
        "Kenneth Hsu",
        "David Curry"
    ],
    "assignee": "Telecom Holding Parent LLC",
    "classifications": [
        "H04Q11/0478",
        "H04L47/10",
        "H04L47/15",
        "H04L47/20",
        "H04L47/32",
        "H04L49/203",
        "H04L49/3081",
        "H04L2012/5637",
        "H04L2012/5679"
    ],
    "claims": "\n1. A method for scheduling packets in a broadband data stream, comprising the steps of:\nreceiving a packet descriptor;\nsubtracting a header from said packet descriptor;\nassigning a priority and a circuit parameter to said packet descriptor;\ndetermining a schedule to send a packet associated with said packet descriptor based on said priority and said circuit parameter;\nreferencing said schedule in said packet descriptor to obtain a modified packet descriptor;\nadding said header to said modified packet descriptor; and\nsending said modified packet descriptor.\n2. An apparatus for scheduling packets in a broadband data stream, comprising:\nan interface; and\na packet scheduler, said packet scheduler including:\na policer;\na congestion manager:\na scheduler; and\na virtual output queue handler;\nwherein said interface subtracts a header from a packet descriptor and passes said packet descriptor to said packet scheduler;\nwherein said policer assigns a compliance identifier to said packet descriptor, said congestion manager determines whether to drop said packet descriptor based on said compliance identifier, said scheduler determines a schedule to send a packet associated with said packet descriptor and includes said schedule in said packet descriptor to obtain a modified packet descriptor, and said virtual output queue handler enforces said schedule through said interface; and\nwherein said interface adds said header to said modified packet descriptor.\n3. A method for policing packets in a data stream, comprising the steps of:\nreceiving a packet having an assigned input compliance identifier;\ndetermining if said packet conforms to a policing rate:\nif said packet conforms to said policing rate:\nassigning a first compliance identifier to said packet; and\nif said packet does not conform to said policing rate:\nassigning a second compliance identifier to said packet;\ncomparing said first or said second compliance identifier to said assigned input compliance identifier; and\nassigning a lower compliance identifier to said packet based on said comparing step.\n4. The method of claim 3, wherein if said packet does not conform to said policing rate, instead of assigning a second compliance identifier to said packet, said packet is dropped.\n5. The method of claim 3, wherein said determining step includes the steps of:\ncomparing an actual arrival time of said packet to a theoretical arrival time;\nif said theoretical arrival time is greater than said actual arrival time:\ncomparing said theoretical arrival time to a sum of said arrival time and a packet limit; wherein said packet is assigned said first compliance identifier if said theoretical arrival time is less than said sum and said packet is assigned said second compliance identifier if said theoretical arrival time is greater than or equal to said sum; and\nupdating said theoretical arrival time if said first compliance identifier is assigned.\n6. The method of claim 5, further comprising the step of: if said theoretical arrival time is less than or equal to said actual arrival time, setting said theoretical arrival time to equal said actual arrival time and assigning said first compliance identifier to said packet.\n7. The method of claim 5, further comprising the step of calculating said theoretical arrival time based on said policing rate.\n8. The method of claim 5, further comprising the step of calculating said packet limit based on a packet delay variation tolerance.\n9. The method of claim 5, wherein said updating step includes the steps of:\ndetermining an increment value; and\nadding said increment value to said theoretical arrival time.\n10. The method of claim 9, further comprising the step of calculating said increment value based on a basic time interval and a size of said packet.\n11. The method of claim 10, further comprising the step of calculating said basic time interval based on said policing rate.\n12. The method of claim 3, further comprising the steps of:\nreceiving a copy of said packet having a second input compliance identifier;\ndetermining if said copy conforms to a second policing rate:\nif said copy conforms to said second policing rate:\nassigning said first compliance identifier to said copy; and\nif said copy does not conform to said second policing rate:\nassigning a third compliance identifier to said copy;\ncomparing said first or said third compliance identifier to said second input compliance identifier; and\nassigning a lower compliance identifier between said first or third compliance identifier and said second input compliance identifier to said copy.\n13. The method of claim 12, wherein if said copy does not conform to said second policing rate, instead of assigning a third compliance identifier to said copy, said copy is dropped.\n14. The method of claim 12, wherein said first compliance identifier indicates greater compliance than said second compliance identifier and said second compliance identifier indicates a greater compliance than said third compliance identifier.\n15. The method of claim 12, wherein said step of determining if said copy conforms to said second policing rate includes the steps of:\ncomparing a second actual arrival time of said copy to a second theoretical arrival time;\nif said second theoretical arrival time is greater than said second actual arrival time:\ncomparing said second theoretical arrival time to a sum of said second arrival time and a second packet limit; wherein said copy is assigned said first compliance identifier if said second theoretical arrival time is less than said sum and said copy is assigned said third compliance identifier if said second theoretical arrival time is greater than or equal to said sum; and\nupdating said second theoretical arrival time if said first compliance identifier is assigned.\n16. The method of claim 15, further comprising the step of: if said second theoretical arrival time is less than or equal to said second actual arrival time, setting said second theoretical arrival time to equal to said second actual arrival time and assigning said first compliance identifier to said copy.\n17. The method of claim 15, further comprising the step of calculating said second theoretical arrival time based on said second policing rate.\n18. The method of claim 15, further comprising the step of calculating said second packet limit based on said policing rate, said second policing rate, and a maximum burst size.\n19. The method of claim 15, wherein said step of updating said second theoretical arrival time includes the steps of:\ndetermining a second increment value; and\nadding said second increment value to said second theoretical arrival time.\n20. The method of claim 19, further comprising the step of calculating said second increment value based on a second basic time interval and a size of said packet.\n21. The method of claim 20, further comprising the step of calculating said second basic time interval based on said second policing rate.\n22. A computer program product for policing packets in a data stream, comprising:\nlogic code for receiving a packet having an assigned input compliance identifier;\nlogic code for determining if said packet conforms to a policing rate:\nif said packet conforms to said policing rate:\nlogic code for assigning a first compliance identifier to said packet; and\nif said packet does not conform to said policing rate:\nlogic code for assigning a second compliance identifier to said packet;\nlogic code for comparing said first or said second compliance identifier to said assigned input compliance identifier; and\nlogic code for assigning a lower compliance identifier to said packet based on said comparing.\n23. The computer program product of claim 22, wherein if said packet does not conform to said policing rate, further comprises logic code for dropping said packet instead of assigning a second compliance identifier to said packet.\n24. The computer program product of claim 22, wherein said logic code for determining includes:\nlogic code for comparing an actual arrival time of said packet to a theoretical arrival time;\nif said theoretical arrival time is greater than said actual arrival time:\nlogic code for comparing said theoretical arrival time to a sum of said arrival time and a packet limit; wherein said packet is assigned said first compliance identifier if said theoretical arrival time is less than said sum and said packet is assigned said second compliance identifier if said theoretical arrival time is greater than or equal to said sum; and\nlogic code for updating said theoretical arrival time if said first compliance identifier is assigned.\n25. The computer program product of claim 24, further comprising: if said theoretical arrival time is less than or equal to said actual arrival time, logic code for setting said theoretical arrival time to equal said actual arrival time and logic code for assigning said first compliance identifier to said packet.\n26. The computer program product of claim 24, further comprising logic code for calculating said theoretical arrival time based on said policing rate.\n27. The computer program product of claim 24, further comprising logic code for calculating said packet limit based on a packet delay variation tolerance.\n28. The computer program product of claim 24, wherein said logic code for updating includes:\nlogic code for determining an increment value; and\nlogic code for adding said increment value to said theoretical arrival time.\n29. The computer program product of claim 28, further comprising logic code for calculating said increment value based on a basic time interval and a size of said packet.\n30. The computer program product of claim 29, further comprising logic code for calculating said basic time interval based on said policing rate.\n31. The computer program product of claim 22, further comprising:\nlogic code for receiving a copy of said packet having a second input compliance identifier;\nlogic code for determining if said copy conforms to a second policing rate:\nif said copy conforms to said second policing rate:\nlogic code for assigning said first compliance identifier to said copy; and\nif said copy does not conform to said second policing rate:\nlogic code for assigning a third compliance identifier to said copy;\nlogic code for comparing said first or said third compliance identifier to said second input compliance identifier; and\nlogic code for assigning a lower compliance identifier between said first or third compliance identifier and said second input compliance identifier to said copy.\n32. The computer program product of claim 31, wherein if said copy does not conform to said second policing rate, further comprises logic code dropping said copy instead of assigning a third compliance identifier to said copy.\n33. The computer program product of claim 31, wherein said first compliance identifier indicates greater compliance than said second compliance identifier and said second compliance identifier indicates a greater compliance than said third compliance identifier.\n34. The computer program product of claim 31, wherein said logic code for determining if said copy conforms to said second policing rate includes:\nlogic code for comparing a second actual arrival time of said copy to a second theoretical arrival time;\nif said second theoretical arrival time is greater than said second actual arrival time:\nlogic code for comparing said second theoretical arrival time to a sum of said second arrival time and a second packet limit;\nwherein said copy is assigned said first compliance identifier if said second theoretical arrival time is less than said sum and said copy is assigned said third compliance identifier if said second theoretical arrival time is greater than or equal to said sum; and\nlogic code for updating said second theoretical arrival time if said first compliance identifier is assigned.\n35. The computer program product of claim 34, further comprising: if said second theoretical arrival time is less than or equal to said second actual arrival time, logic code for setting said second theoretical arrival time to equal to said second actual arrival time and logic code for assigning said first compliance identifier to said copy.\n36. The computer program product of claim 34, further comprising logic code for calculating said second theoretical arrival time based on said second policing rate.\n37. The computer program product of claim 34, further comprising calculating said second packet limit based on said policing rate, said second policing rate, and a maximum burst size.\n38. The computer program product of claim 34, wherein said logic code for updating said second theoretical arrival time includes:\nlogic code for determining a second increment value; and\nlogic code for adding said second increment value to said second theoretical arrival time.\n39. The computer program product of claim 38, further comprising logic code for calculating said second increment value based on a second basic time interval and a size of said packet.\n40. The computer program product of claim 39, further comprising logic code for calculating said second basic time interval based on said second policing rate.\n41. A method for managing congestion of packets in a data stream, comprising the steps of:\ndetermining a set of congestion regions by compliance levels, said compliance levels indicating a hierarchy of compliance;\nreceiving a packet having an assigned compliance identifier;\ndetermining an instantaneous queue size;\ncomparing said instantaneous queue size to said set of congestion regions; and\npassing said packet based on said comparing step and said assigned compliance identifier.\n42. The method of claim 41, further comprising the steps of:\ncalculating a percentage in a congestion region;\ngenerating a random number;\ncomparing said percentage to said random number;\ndropping said packet if said percentage is greater than said random number.\n43. The method of claim 41, further comprising the step of: passing all packets when said instantaneous queue size is smaller than a lowest compliance congestion region.\n44. The method of claim 43, wherein said lowest compliance congestion region is a passing region.\n45. The method of claim 41, further comprising the step of: dropping all packets when said instantaneous queue size is larger than or equal to a highest compliance congestion region.\n46. The method of claim 45, wherein said highest compliance congestion region is a dropping region.\n47. The method of claim 41, wherein said compliance levels are determined based on compliance per virtual circuit, per port and per priority for each packet.\n48. The method of claim 41, further comprising the steps of:\nreceiving unused memory space information regarding a chip;\nmanaging congestion level of said chip based on said unused memory space information; said managing step including: allocating a portion of said unused memory space to each traffic priority.\n49. A computer program product for managing congestion of packets in a data stream, comprising:\nlogic code for determining a set of congestion regions by compliance levels, said compliance levels indicating a hierarchy of compliance;\nlogic code for receiving a packet having an assigned compliance identifier;\nlogic code for determining an instantaneous queue size;\nlogic code for comparing said instantaneous queue size to said set of congestion regions; and\nlogic code for passing said packet based on said comparing and said assigned compliance identifier.\n50. The computer program product of claim 49, further comprising:\nlogic code for calculating a percentage in a congestion region;\nlogic code for generating a random number;\nlogic code for comparing said percentage to said random number;\nlogic code for dropping said packet if said percentage is greater than said random number.\n51. The computer program product of claim 49, further comprising: logic code for passing all packets when said instantaneous queue size is smaller than a lowest compliance congestion region.\n52. The computer program product of claim 51, wherein said lowest compliance congestion region is a passing region.\n53. The computer program product of claim 49, further comprising: logic code for dropping all packets when said instantaneous queue size is larger than or equal to a highest compliance congestion region.\n54. The computer program product of claim 53, wherein said highest compliance congestion region is a dropping region.\n55. The computer program product of claim 49, wherein said compliance levels are determined based on compliance per virtual circuit, per port and per priority for each packet.\n56. The computer program product of claim 49, further comprising:\nlogic code for receiving unused memory space information regarding a chip;\nlogic code for managing congestion level of said chip based on said unused memory space information; said logic code for managing including logic code for allocating a portion of said unused memory space to each traffic priority.\n57. A method for scheduling packets in a broadband data stream, comprising the steps of:\nreceiving a packet identifier;\ndetermining a connection associated with said packet identifier;\nstoring said packet identifier in a queue for said connection, said connection belonging to a group; and\nservicing said queue based on a schedule.\n58. The method of claim 57, wherein said storing step includes the step of:\ndelaying said packet identifier on a connection timing wheel until a connection theoretical arrival time occurs or until a next time slot.\n59. The method of claim 58, wherein said step of delaying said packet identifier on a connection timing wheel further includes the steps of:\ndelaying said packet identifier on a coarse connection timing wheel; and\ndelaying said packet identifier on a fine connection timing wheel.\n60. The method of claim 57, wherein said servicing step includes the steps of:\ndelaying said group on a group timing wheel until a group theoretical arrival time occurs;\nqueuing said group into an output queue;\nselecting said packet identifier from said group in said output queue;\nsending said packet identifier.\n61. The method of claim 60, wherein said step of delaying said group on a group timing wheel further includes the steps of:\ndelaying said group on a coarse group timing wheel; and\ndelaying said group on a fine group timing wheel.\n62. The method of claim 59 or 61, further comprising the step of:\nimplementing an unspecified bit rate traffic class using said connection timing wheel and said group timing wheel.\n63. An apparatus for scheduling packets in a broadband data stream, comprising:\na set of queues;\na set of connection timing wheels;\na set of group timing wheels;\na connection queue manager; and\na group queue manager;\nwherein a received packet identifier is placed on a queue in said set of queues and said queue is first delayed on said set of connection timing wheels and then delayed on said set of group timing wheels in accordance with instructions from said connection queue manager and said group queue manager.\n64. The apparatus of claim 63, wherein said set of connection timing wheels includes a coarse connection timing wheel and a fine connection timing wheel.\n65. The apparatus of claim 64, wherein said queue is first delayed on said coarse connection timing wheel then on said fine connection timing wheel.\n66. The apparatus of claim 63, wherein said set of group timing wheels includes a coarse group timing wheel and a fine group timing wheel.\n67. The apparatus of claim 66, wherein said queue is first delayed on said coarse group timing wheel then on said fine group timing wheel.\n68. A method for handling scheduled packets in a broadband data stream, comprising the steps of:\nreceiving a scheduled packet identifier;\nreceiving a feedback signal;\nstoring said scheduled packet identifier in a virtual output queue based on said feedback signal;\nservicing said virtual output queue based on a schedule;\nsending said scheduled packet identifier from said virtual output queue based on said servicing step.\n69. The method of claim 68, further comprising the step of:\nsignaling a scheduler to stop sending scheduled packet identifier when said virtual output queue becomes full.\n70. The method of claim 68, further comprising the steps of:\nreceiving a multicast source packet identifier;\ngenerating a set of leaf packet identifiers based on said multicast source packet identifier; and\nprocessing said set of leaf packet identifiers.\n71. The method of claim 70, further comprising the steps of:\nintercepting a drop signal;\nparsing said drop signal; and\nsending said drop signal to a FIFO if a leaf packet identifier is destined to be dropped by said drop signal.\n72. The method of claim 70, wherein said generating step includes the steps of:\ngenerating a count in a first leaf packet identifier; said count referencing said multicast source packet identifier; and\nreferencing said count in other leaf packet identifiers generated for said multicast source packet identifier.\n73. The method of claim 70, wherein said processing step includes the steps of:\nsending said leaf packet identifiers to traffic engineering blocks, said traffic engineering blocks assigning a priority to each of said leaf packet identifiers and determining a schedule to send each of said leaf packet identifier based on said priority.\n74. The method of claim 68, further comprising the steps of:\ngenerating a monitor packet identifier based on said scheduled packet identifier; and\nprocessing said monitor packet identifier.\n75. The method of claim 74, wherein said processing step includes the steps of:\nassigning a priority to said monitor packet identifier; and\ndetermining a schedule to send said monitor packet identifier based on said priority.\n76. A computer program product for handling scheduled packets in a broadband data stream, comprising:\nlogic code for receiving a scheduled packet identifier;\nlogic code for receiving a feedback signal;\nlogic code for storing said scheduled packet identifier in a virtual output queue based on said feedback signal;\nlogic code for servicing said virtual output queue based on a schedule;\nlogic code for sending said scheduled packet identifier from said virtual output queue based on said servicing.\n77. The computer program product of claim 76, further comprising:\nlogic code for signaling a scheduler to stop sending scheduled packet identifier when said virtual output queue becomes full.\n78. The computer program product of claim 76, further comprising:\nlogic code for receiving a multicast source packet identifier;\nlogic code for generating a set of leaf packet identifiers based on said multicast source packet identifier; and\nlogic code for processing said set of leaf packet identifiers.\n79. The computer program product of claim 78, further comprising:\nlogic code for intercepting a drop signal;\nlogic code for parsing said drop signal; and\nlogic code for sending said drop signal to a FIFO if a leaf packet identifier is destined to be dropped by said drop signal.\n80. The computer program product of claim 78, wherein said logic code for generating includes:\nlogic code for generating a count in a first leaf packet identifier; said count referencing said multicast source packet identifier; and\nlogic code for referencing said count in other leaf packet identifiers generated for said multicast source packet identifier.\n81. The computer program product of claim 78, wherein said logic code for processing includes:\nlogic code for sending said leaf packet identifiers to traffic engineering blocks, said traffic engineering blocks including logic code for assigning a priority to each of said leaf packet identifiers and logic code for determining a schedule to send each of said leaf packet identifier based on said priority.\n82. The computer program product of claim 76, further comprising:\nlogic code for generating a monitor packet identifier based on said scheduled packet identifier; and\nlogic code for processing said monitor packet identifier.\n83. The computer program product of claim 82, wherein said logic code for processing includes:\nlogic code for assigning a priority to said monitor packet identifier; and\nlogic code for determining a schedule to send said monitor packet identifier based on said priority.",
    "status": "Expired - Lifetime",
    "citations_own": [
        "US5790522A",
        "US5926459A",
        "US6067301A",
        "US6084855A",
        "US6104700A",
        "US6111673A",
        "US6389019B1",
        "US20030037159A1",
        "US20040005896A1"
    ],
    "citations_ftf": [
        "DE69232305T2",
        "FI92361C",
        "JP2639335B2",
        "ZA959722B",
        "US5535201A",
        "US5610745A",
        "US5787271A",
        "US5959993A",
        "US6091705A",
        "JP2959539B2",
        "US6424624B1",
        "US6934253B2",
        "CN1166247C",
        "US6792500B1",
        "US6400688B1",
        "US6687228B1",
        "US6859435B1",
        "US6757249B1",
        "US6748435B1",
        "US6636515B1",
        "US6987732B2",
        "US6741562B1",
        "US6847641B2",
        "JP4032231B2",
        "US7312829B2",
        "US7295565B2",
        "US7369493B2",
        "US20070237074A1"
    ],
    "citedby_own": [
        "US20020122428A1",
        "US20020167901A1",
        "US20020172153A1",
        "US20020181483A1",
        "US20040015599A1",
        "US20040151184A1",
        "US20040179479A1",
        "US20040196855A1",
        "US20040202148A1",
        "US20040218604A1",
        "WO2005022847A1",
        "US20050088970A1",
        "US6954427B1",
        "US6963536B1",
        "EP1626544A1",
        "US20060146710A1",
        "US20060195698A1",
        "US7149187B1",
        "US7158480B1",
        "US20070104095A1",
        "US20070162740A1",
        "US20070165647A1",
        "US20070201365A1",
        "US20070206602A1",
        "US7274663B2",
        "US20070253360A1",
        "US20070263864A1",
        "US20080317059A1",
        "US20100254387A1",
        "US7813348B1",
        "US7965638B1",
        "USRE42600E1",
        "US8072887B1",
        "US20120079076A1",
        "US20120124430A1",
        "US8499051B2",
        "US8788576B2",
        "US8812051B2",
        "US9014562B2",
        "US20150295828A1",
        "US20150312163A1",
        "US9420072B2",
        "US9537777B1",
        "US9774721B2",
        "US20170324846A1",
        "US20170339074A1",
        "US10270713B2",
        "US10367743B2",
        "US11824799B2"
    ],
    "citedby_ftf": [
        "US6987732B2",
        "EP1261183A1",
        "US7369489B1",
        "US7685287B2",
        "US7206284B2",
        "JP4420234B2",
        "CN101529386B",
        "US20070237074A1",
        "WO2008038261A2",
        "US9154247B2",
        "JP4893646B2",
        "CN101621460B",
        "US8943236B1",
        "US8867360B2",
        "US8787966B2",
        "EP2684398A4",
        "US8954809B2",
        "US9338650B2",
        "US9980171B2",
        "US9369921B2",
        "US9515965B2",
        "US10986029B2",
        "US10015096B1",
        "US10069734B1",
        "US10116567B1",
        "US10097467B1",
        "US10009275B1",
        "US11088947B2"
    ]
}