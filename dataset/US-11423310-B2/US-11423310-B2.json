{
    "patent_id": "US-11423310-B2",
    "title": "Deep learning based adaptive arithmetic coding and codelength regularization ",
    "assignee": "WaveOne Inc.",
    "publication_date": "2022-08-23",
    "patent_link": "https://patents.google.com/patent/US11423310B2/en",
    "inventors": [
        "Oren Rippel",
        "Lubomir Bourdev"
    ],
    "classifications": [
        "G06N3/0455",
        "G06N20/00",
        "G06N3/04",
        "G06N3/08",
        "G06V10/82",
        "G06V20/52",
        "G06V30/18057",
        "G06V30/19147",
        "G06V30/19167",
        "G06V30/19173",
        "G06V40/172",
        "G06F18/213",
        "G06F18/214",
        "G06F18/2178",
        "G06F18/24143",
        "G06K9/6232",
        "G06K9/6256",
        "G06K9/6263",
        "G06K9/6274",
        "G06N3/045",
        "G06N3/0454",
        "G06N3/047",
        "G06N3/084",
        "G06T5/002",
        "G06V10/449",
        "G06V10/454",
        "G06V10/758",
        "G06V20/46",
        "G06V30/10",
        "G06V30/194",
        "H04N19/126",
        "H04N19/13",
        "H04N19/149",
        "H04N19/154",
        "H04N19/167",
        "H04N19/172",
        "H04N19/18",
        "H04N19/197",
        "H04N19/33",
        "H04N19/44",
        "H04N19/48",
        "H04N19/91"
    ],
    "abstract": "A deep learning based compression (DLBC) system applies trained models to compress binary code of an input image to a target codelength. For a set of binary codes representing the quantized coefficents of an input image, the DLBC system applies a first model that is trained to predict feature probabilities based on the context of each bit of the binary codes. The DLBC system compresses the binary code via adaptive arithmetic coding based on the determined probability of each bit. The compressed binary code represents a balance between a reconstruction quality of a reconstruction of the input image and a target compression ratio of the compressed binary code.",
    "claims": "\n1. A computer-implemented method comprising:\nreceiving compressed code for an input image that encodes values of one or more processing units for a plurality of bitplanes;\nobtaining a plurality of context features and a plurality of feature probabilities for the plurality of context features, wherein a context feature indicates a context of a processing unit, and a feature probability for a respective context feature indicates a likelihood a processing unit associated with the respective context feature has a non-zero value;\nfor each processing unit in the one or more processing units:\ndetermining a context feature associated with the processing unit based on one or more previously decoded processing units;\ndecoding a value of the processing unit from the compressed code using a feature probability for the context feature associated with the processing unit;\ngenerating a tensor for the input image based on the decoded values of the one or more processing units for the plurality of bitplanes; and\ngenerating a reconstructed version of the input image applying a decoder portion of a neural network autoencoder to the tensor, wherein the decoder portion includes a trained set of parameters.\n2. The computer-implemented method of claim 1, wherein the context of the processing unit comprises values of processing units neighboring the processing unit in the plurality of bitplanes.\n3. The computer-implemented method of claim 1, wherein the context of the processing unit comprises an index of a corresponding channel of the processing unit.\n4. The computer-implemented method of claim 1, wherein each bit in a bitplane of the plurality of bitplanes corresponds to a processing unit.\n5. The computer-implemented method of claim 4, wherein the feature probability for the respective context feature indicates a likelihood the processing unit associated with the respective context feature has a value of 1.\n6. The computer-implemented method of claim 4, wherein the context of the processing unit comprises a bitplane index of the processing unit.\n7. The computer-implemented method of claim 4, wherein the context of the processing unit comprises whether co-located processing units associated with lower bitplane indices have non-zero values.\n8. The computer-implemented method of claim 1, wherein the input image is a residual frame of a video predicted from a plurality of video frames of the video.\n9. The computer-implemented method of claim 1, wherein the compressed code is obtained from an encoded tensor generated by applying an encoder portion of the neural network autoencoder to the input image.\n10. The computer-implemented method of claim 1, wherein decoding the value of the processing unit further comprises performing arithmetic decoding on the compressed code using the feature probability for the context feature associated with the processing unit.\n11. A non-transitory computer-readable storage medium including instructions that, when executed by a processor, cause the processor to perform steps including:\nreceiving compressed code for an input image that encodes values of one or more processing units for a plurality of bitplanes;\nobtaining a plurality of context features and a plurality of feature probabilities for the plurality of context features, wherein a context feature indicates a context of a processing unit, and a feature probability for a respective context feature indicates a likelihood a processing unit associated with the respective context feature has a non-zero value;\nfor each processing unit in the one or more processing units:\ndetermining a context feature associated with the processing unit based on one or more previously decoded processing units;\ndecoding a value of the processing unit from the compressed code using a feature probability for the context feature associated with the processing unit;\ngenerating a tensor for the input image based on the decoded values of the one or more processing units for the plurality of bitplanes; and\ngenerating a reconstructed version of the input image applying a decoder portion of a neural network autoencoder to the tensor, wherein the decoder portion includes a trained set of parameters.\n12. The non-transitory computer-readable storage medium of claim 11, wherein the context of the processing unit comprises values of processing units neighboring the processing unit in the plurality of bitplanes.\n13. The non-transitory computer-readable storage medium of claim 11, wherein the context of the processing unit comprises an index of a corresponding channel of the processing unit.\n14. The non-transitory computer-readable storage medium of claim 11, wherein each bit in a bitplane of the plurality of bitplanes corresponds to a processing unit.\n15. The non-transitory computer-readable storage medium of claim 14, wherein the feature probability for the respective context feature indicates a likelihood the processing unit associated with the respective context feature has a value of 1.\n16. The non-transitory computer-readable storage medium of claim 14, wherein the context of the processing unit comprises a bitplane index of the processing unit.\n17. The non-transitory computer-readable storage medium of claim 14, wherein the context of the processing unit comprises whether co-located processing units associated with lower bitplane indices have non-zero values.\n18. The non-transitory computer-readable storage medium of claim 11, wherein the input image is a residual frame of a video predicted from a plurality of video frames of the video.\n19. The non-transitory computer-readable storage medium of claim 11, wherein the compressed code is obtained from an encoded tensor generated by applying an encoder portion of the neural network autoencoder to the input image.\n20. The non-transitory computer-readable storage medium of claim 11, wherein decoding the value of the processing unit further comprises performing arithmetic decoding on the compressed code using the feature probability for the context feature associated with the processing unit.",
    "status": "Active",
    "citations_own": [
        "US6778709B1",
        "US20110229048A1",
        "US20160098633A1",
        "US20170083792A1",
        "US20170118471A1",
        "US20170264902A1",
        "US20170316312A1",
        "US20180107925A1",
        "US20180139458A1",
        "US20180137389A1",
        "US20180146199A1",
        "US20180249158A1",
        "US20190171936A1",
        "US20190205606A1"
    ],
    "citations_ftf": [
        "US6091773A",
        "US6424737B1",
        "US7035473B1",
        "US6661927B1",
        "JP4118766B2",
        "GB0427737D0",
        "US8170101B2",
        "US7813564B2",
        "US20110158470A1",
        "JP5161845B2",
        "JP5421727B2",
        "US20160013773A1",
        "US20140132429A1",
        "GB201312382D0",
        "US10356410B2",
        "EP3259913B1",
        "CN104933685A",
        "US10192327B1",
        "CN116546221A",
        "US10222441B2",
        "US10032067B2",
        "US10754063B2",
        "US10776659B2",
        "US10467459B2",
        "CN106646595B",
        "US20180107926A1",
        "US10623775B1",
        "US10276134B2",
        "US10475165B2",
        "US20190035113A1",
        "US10402995B2",
        "US11120337B2"
    ],
    "citedby_own": [],
    "citedby_ftf": [
        "US10410398B2",
        "US10623775B1",
        "US10483981B2",
        "US10592776B2",
        "US10276134B2",
        "US10678244B2",
        "US10595039B2",
        "WO2018199051A1",
        "CN108882020B",
        "WO2018218249A1",
        "KR102530000B1",
        "US10671082B2",
        "US10986356B2",
        "EP3567857A1",
        "US10419785B2",
        "US10671349B2",
        "US11409692B2",
        "US11157441B2",
        "WO2019028592A1",
        "WO2019074744A1",
        "US11710300B2",
        "CN107730474B",
        "US10114857B1",
        "US11354301B2",
        "CN108537244A",
        "CN109886442A",
        "GB2573486B",
        "US10540574B2",
        "US10635409B2",
        "US11561791B2",
        "US11200512B2",
        "GB2574575A",
        "US10499081B1",
        "US11215999B2",
        "US10706499B2",
        "US20200021815A1",
        "CN109242097B",
        "US11552731B2",
        "US11636333B2",
        "CN108985385A",
        "CN109040763A",
        "CN109087298B",
        "CN109344717B",
        "US11562231B2",
        "CN109168003B",
        "CN109325530B",
        "US10699447B2",
        "US11212076B2",
        "US11032063B2",
        "CN109344278B",
        "EP3836548A4",
        "US11412225B2",
        "CN109410179B",
        "WO2020070376A1",
        "CN111045726B",
        "US11017307B2",
        "KR102525578B1",
        "US11720997B2",
        "WO2020080665A1",
        "WO2020080827A1",
        "WO2020080873A1",
        "WO2020080698A1",
        "WO2020080765A1",
        "KR20200044653A",
        "US11196678B2",
        "US11663483B2",
        "US11423282B2",
        "CN109559276B",
        "US20220005233A1",
        "CN109829561B",
        "US11295514B2",
        "US11449713B2",
        "US11461583B2",
        "US11443237B1",
        "CN109451308B",
        "US10601454B1",
        "US11537811B2",
        "EP3664451B1",
        "CN111353594B",
        "CN109753992B",
        "CN109698017B",
        "US11610117B2",
        "US11335034B2",
        "US11468542B2",
        "EP3893098B1",
        "US10325201B1",
        "US10997461B2",
        "US11567514B2",
        "CN113424200A",
        "US10956755B2",
        "US10771088B1",
        "EP3908983A1",
        "US10594338B1",
        "US11388416B2",
        "CN109934300B",
        "CN109889839B",
        "US11120526B1",
        "CN110062125A",
        "US10489936B1",
        "CN110110126B",
        "CN110120038B",
        "JP7141007B2",
        "US11574232B2",
        "US11699097B2",
        "CN111988629A",
        "CN113874916A",
        "CN110209817B",
        "JP2021015346A",
        "CN112307230A",
        "US10848773B1",
        "CN110650339A",
        "US10839565B1",
        "CN110688205B",
        "US20210064987A1",
        "DE102019213547A1",
        "CN110826593B",
        "US20210103813A1",
        "US11341688B2",
        "US11570030B2",
        "US10999582B1",
        "FR3102026B1",
        "KR20210044484A",
        "TWI730467B",
        "CN111046900B",
        "KR102436512B1",
        "CN110769263A",
        "CN110677671A",
        "CN110830807B",
        "KR20210056179A",
        "US11375194B2",
        "US11431583B2",
        "JP7337950B2",
        "US11245903B2",
        "US11388412B2",
        "KR20210067788A",
        "US11409516B2",
        "CN112990473A",
        "CN111028177B",
        "CN111080727B",
        "CN110992295B",
        "CN111181671B",
        "CN111222355A",
        "EP4087239A4",
        "CN111083482A",
        "CN111091518B",
        "US11223833B2",
        "CN111157109A",
        "EP3849180A1",
        "CN111310918B",
        "CN111294595B",
        "US20210247602A1",
        "KR102287942B1",
        "CN111314708B",
        "WO2021168827A1",
        "US20210283717A1",
        "EP3885991A1",
        "US11777520B2",
        "WO2021206687A1",
        "WO2021205066A1",
        "CN111651198B",
        "CN111932548B",
        "JP2021174183A",
        "DE102020205581A1",
        "US11763165B2",
        "US11693637B1",
        "DE102020206994A1",
        "CN113965750B",
        "CN111950638A",
        "US11551090B2",
        "US20220103839A1",
        "KR20220065209A",
        "CN114501031B",
        "CN112288044B",
        "WO2022154686A1",
        "CN112801297B",
        "WO2022168263A1",
        "WO2022212215A1",
        "US20220335656A1",
        "CN113297289A",
        "US11328209B1",
        "US20220405978A1",
        "US20220408089A1",
        "US20230012236A1",
        "CN113507605B",
        "KR102467094B1",
        "KR102467092B1",
        "US11711449B2",
        "WO2023158649A1",
        "WO2023172593A1",
        "CN115525915A",
        "CN115329952B",
        "CN116468071A"
    ]
}