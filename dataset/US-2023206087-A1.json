{
    "patent_id": "US-2023206087-A1",
    "title": "Techniques for building a knowledge graph in limited knowledge domains ",
    "assignee": "Oracle International Corporation",
    "publication_date": "2023-06-29",
    "patent_link": "https://patents.google.com/patent/US20230206087A1/en",
    "inventors": [
        "Gautam Singaraju",
        "Prithviraj Venkata Ammanabrolu"
    ],
    "classifications": [
        "G06N5/022",
        "G06N5/025",
        "G06N20/00",
        "G06N5/041",
        "G06N3/006",
        "G06N3/08"
    ],
    "abstract": "Techniques disclosed herein relate generally to constructing a customized knowledge graph. In one embodiment, entities and relations among entities are extracted from a user dataset based on certain rules to generate a seed graph. Large-scale knowledge graphs are then traversed using a finite state machine to identify candidate entities and/or relations to add to the seed graph. A priority function is used to select entities and/or relations from the candidate entities and/or relations. The selected entities and/or relations are then added to the seed graph to generate the customized knowledge graph.",
    "claims": "\n1. A computer-implemented method for generating a customized knowledge graph for an application, the computer-implemented method comprising:\nobtaining a seed graph that represents entities from a user dataset and links between the entities;\nidentifying a weakly connected component in the seed graph;\nmapping entities in the weakly connected component to vertices in a reference knowledge graph;\nusing the mapped vertices in the reference knowledge graph as starting points, traversing the reference knowledge graph based on a finite state machine to identify a first threshold number of vertices in the reference knowledge graph and a first threshold number of entities represented by the first threshold number of vertices;\ncomputing priority scores for stored entries corresponding to the identified entities;\nselecting, from the stored entries, a first set of entries having highest priority scores;\nadding entities and links identified by the first set of entries to the seed graph to generate a version of the customized knowledge graph;\nreceiving an utterance;\ndetermining a user intent corresponding to the utterance using the version of the customized knowledge graph; and\nproviding a response to the utterance based upon the determined user intent.\n2. The computer-implemented method of claim 1, wherein the user dataset includes a plurality of user utterances.\n3. The computer-implemented method of claim 1, wherein extracting the entities and identifying the links between the entities include performing, on the user dataset, at least one of:\nlabelling words with their appropriate parts of speech;\nlocating and classifying named entities in unstructured text into pre-defined categories; or\nextracting a constituency-based parse tree from a sentence to represent the syntactic structure of the sentence according to a phrase structure grammar.\n4. The computer-implemented method of claim 1, wherein mapping the entities in the weakly connected component to the vertices in the reference knowledge graph comprises mapping the entities to the vertices in the reference knowledge graph using named entity linking.\n5. The computer-implemented method of claim 1, wherein the priority score for a stored entry is determined using a priority function that is a function of:\na number of weakly connected components in a knowledge graph including the seed graph and the entity associated with the entry;\na graph density of the knowledge graph including the seed graph and the entity associated with the stored entry; and\na control parameter.\n6. The computer-implemented method of claim 5, further comprising, after adding the entities and links identified in the first set of entries to the seed graph, updating the control parameter.\n7. The computer-implemented method of claim 6, wherein updating the control parameter includes multiplying the control parameter with a value less than 1.\n8. The computer-implemented method of claim 6, further comprising:\nfor each weakly connected component in the version of the customized knowledge graph:\nmapping entities in the weakly connected component to vertices in the reference knowledge graph;\ntraversing, from the mapped vertices in the reference knowledge graph and based on the finite state machine, the reference knowledge graph to identify up to the first threshold number of entities in the reference knowledge graph; and\ncomputing priority scores for stored entries using the priority function and the updated control parameter;\nselecting, stored entries, a second set of entries having the highest priority scores; and\nadding entities and links identified by the second set of entries to the seed graph to generate an updated customized knowledge graph.\n9. The computer-implemented method of claim 1, further comprising for each entity in the threshold number of entities, storing an entry in a buffer representing the entity, wherein the entry comprises information characterizing the entity and is a stored entry of the stored entries corresponding to the identified entities.\n10. The computer-implemented method of claim 9, wherein:\nthe finite state machine includes a disambiguation state, an entity state, a forbidden state, and an end state; and\ntraversing the reference knowledge graph comprises:\nwhen a next vertex in the reference knowledge graph is a disambiguation vertex, entering the disambiguation state;\nwhen the next vertex in the reference knowledge graph is a forbidden vertex:\nif a current state of the finite state machine is not the forbidden state, entering the forbidden state;\nwhen the next vertex in the reference knowledge graph is an entity vertex:\nentering the entity state; and\nsaving a Resource Description Framework (RDF) of the next vertex in the reference knowledge graph as an entry in the buffer; and\nwhen a number of entries in the buffer is greater than a second threshold number, entering the end state.\n11. The computer-implemented method of claim 10, wherein the forbidden vertex includes a date, a time value, a link to another reference knowledge graph, a web page, or a duplicated or redirected entity.\n12. The computer-implemented method of claim 1, wherein determining a user intent corresponding to the utterance comprises:\nextracting entities from the utterance;\ngenerating, based on the customized knowledge graph, knowledge graph embeddings for the extracted entities; and\nclassifying the utterance based on the knowledge graph embeddings for the extracted entities.\n13. The computer-implemented method of claim 12, wherein generating the knowledge graph embeddings includes generating the knowledge graph embeddings using Translating Embeddings for Modeling Multi-relational Data (TransE) or an extension of TransE.\n14. The computer-implemented method of claim 12, wherein generating the knowledge graph embeddings includes generating the knowledge graph embeddings using TransE and a weighted scoring function.\n15. The computer-implemented method of claim 12, wherein generating the knowledge graph embeddings comprises:\npretraining, using the reference knowledge graph, the knowledge graph embeddings for the entities extracted from the utterance; and\nretraining, using the customized knowledge graph and the pretrained knowledge graph embeddings, the knowledge graph embeddings for the entities extracted from the utterance.\n16. The computer-implemented method of claim 12, wherein classifying the utterance based on the knowledge graph embeddings for the extracted entities comprises:\ndetermining an average knowledge graph embedding of the knowledge graph embeddings for the extracted entities;\ndetermining an average Global Vectors (GloVe) vector of GloVe vectors for words in the utterance; and\nclassifying the utterance based on the average knowledge graph embedding and the average GloVe vector.\n17. The computer-implemented method of claim 16, wherein classifying the utterance based on the average knowledge graph embedding and the average GloVe vector comprises:\ncombining the average knowledge graph embedding and the average GloVe vector to generate a concatenated vector;\nperforming principal component analysis on the concatenated vector; and\nclassing the utterance based on the principal component analysis.\n18. The computer-implemented method of claim 16, wherein determining the average GloVe vector of GloVe vectors for words in the utterance comprises:\ncleaning the utterance;\ngenerating a GloVe vector for each word in the cleaned utterance; and\naveraging the GloVe vector for each word in the cleaned utterance.\n19. A non-transitory computer readable medium storing a plurality of instructions executable by one or more processors, wherein the plurality of instructions, when executed by the one or more processors, cause the one or more processors to perform processing comprising:\nobtaining a seed graph that represents entities from a user dataset and links between the entities;\nidentifying a weakly connected component in the seed graph;\nmapping entities in the weakly connected component to vertices in a reference knowledge graph;\nusing the mapped vertices in the reference knowledge graph as starting points, traversing the reference knowledge graph based on a finite state machine to identify a first threshold number of vertices in the reference knowledge graph and a first threshold number of entities represented by the first threshold number of vertices;\ncomputing priority scores for stored entries corresponding to the identified entities;\nselecting, from the stored entries, a first set of entries having highest priority scores; and\nadding entities and links identified in the first set of entries to the seed graph to generate an expanded version of the seed graph, wherein the application thereafter:\nreceives an utterance;\ndetermines a user intent corresponding to the utterance using the expanded version of the seed graph; and\nprovides a response to the utterance based upon the determined user intent.\n20. A system comprising:\none or more processors; and\na memory coupled to the one or more processors, the memory storing instructions, which, when executed by the one or more processors, cause the system to perform operations including:\nobtaining a seed graph that represents entities from a user dataset and links between the entities, the seed graph containing a set of nodes and a set of edges, each node in the set of nodes representing an entity from the user dataset, each edge in the set of edges connecting two nodes and representing a link between the entities represented by the two nodes;\nidentifying a weakly connected component in the seed graph;\nmapping entities in the weakly connected component to vertices corresponding to the entities in a reference knowledge graph;\nusing the mapped vertices in the reference knowledge graph as starting points, traversing the reference knowledge graph based on a finite state machine to identify a first threshold number of vertices in the reference knowledge graph and a first threshold number of entities represented by the first threshold number of vertices;\ncomputing priority scores for stored entries corresponding to the identified entities;\nselecting, from the stored entries, a first set of entries having highest priority scores; and\nadding entities and links identified in the first set of entries to the seed graph to generate an expanded version of the seed graph,\nwherein the expanded version of the seed graph is thereafter used by the application to determine a user intent corresponding to a user utterance."
}