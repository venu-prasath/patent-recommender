{
    "patent_link": "https://patents.google.com/patent/US5488723A/en",
    "patent_id": "US5488723A",
    "title": "Software system having replicated objects and using dynamic messaging, in particular for a monitoring/control installation of redundant architecture",
    "abstract": "The invention relates to an object-oriented software system having replicated objects and which makes it possible to control a monitoring/control installation of redundant architecture and comprising at least one first processor (1) and one second processor (1'). The software system (2) comprises software objects (3) intercommunicating by means of messages via a dynamic object messaging mechanism. A replica (2') of the software system (2) is contained in the second processor (1'). Certain objects (3) of the software system (2) are marked and the dynamic object messaging mechanism (5) includes monitoring means (51) for identifying an object message addressed to a marked object, and means (52) for passing on the contents of the object message, in the form of a network message, to the second processor (1'). In response to the network message, the dynamic object messaging mechanism (5') in the second processor (1') activates the replica (3') of the marked object (3). The invention enables a semi-active redundancy technique to be implemented.",
    "inventors": [
        "Christophe Baradel",
        "Yves Eychenne",
        "Bruno Kohen"
    ],
    "assignee": "Cegelec SA",
    "classifications": [
        "G06F11/2097",
        "G06F11/2038",
        "G06F11/2041"
    ],
    "claims": "\n1. In a monitoring/control installation comprising: a first processor (1) acting as a primary processor for running a first object-oriented program (2) having first objects (A,B,C,D,E,F,G) and a first dynamic object messaging mechanism (5), and a second processor (1') connected to said first processor via a communication network (10), said second processor acting as a backup processor for running a second object-oriented program (2') having second objects (A',B',C',D',E',F',G') and a second dynamic object messaging mechanism (5') with said second objects being replicas of at least certain ones (D,G) of said first objects which encapsulate non-volatile data,\na method for maintaining consistency between said certain ones of said first objects in said first processor and said second objects in said second processor during runtime of said first program, said method comprising the steps of:\nproviding a mark to each of said first objects, said mark being retrievable from processing of an operation invocation on said first objects via said first dynamic object messaging mechanism;\nsetting the mark of said certain ones of said first objects with a specific value;\nin said first dynamic object messaging mechanism,\ndetecting (51,C1), from each operation invocation on one of said a first objects, whether said one of said first objects has a mark set with said specific value,\nwhen said one of said first objects has a mark not set with said specific value, performing (53) the processing of said operation invocation on said one of said first objects,\nwhen said one of said first objects has a mark set with said specific value, broadcasting (52) an object call message corresponding to said operation invocation on said one of said first objects via said communication network for time delaying said object call message at an input of said first processor and said second processor by using an atomic and ordered broadcast protocol, and\nretrieving (54), from said communication network, object call messages and processing said object call messages to perform a succession of corresponding operation invocations on said first objects; and\nin the second dynamic object messaging mechanism,\nretrieving (54'), from said communication network, object call messages, and\nprocessing said object call messages to perform a succession of corresponding operation invocations on said second objects, so that the successive operations on said certain ones of said first objects in said first processor and the successive operations on the replicas of said certain ones of said first objects in said second processor are performed in the same order.\n2. The method according to claim 1, further comprising, in said first dynamic object messaging mechanism, the steps of:\ndetecting (51,C0), from each operation invocation on one of said a first objects, whether said operation has an operation identifier which is present in a table of operation identifiers, and\nprocessing (53) said operation invocation without broadcasting an object call message via said communication network when said operation identifier is not present in said table of operation identifiers even if said first object has a mark set with said specific value\n3. The method according to claim 1, wherein the step providing a mark to each of said first objects is performed by inheritance of an additional attribute of an object class defining objects of said first program.\n4. The method according to claim 2, wherein the step providing a mark to each of said first objects is performed by inheritance of an additional attribute of an object class defining objects of said first program.",
    "status": "Expired - Lifetime",
    "citations_own": [
        "US4356546A",
        "FR2561410A1",
        "US4590554A",
        "US4633387A",
        "EP0228559A1",
        "US4714995A",
        "US4797884A",
        "US4853843A",
        "US4958270A",
        "US5088021A",
        "US5230051A"
    ],
    "citations_ftf": [],
    "citedby_own": [
        "US5652887A",
        "US5777544A",
        "US5878226A",
        "US5931915A",
        "US5953527A",
        "US6034988A",
        "US6253253B1",
        "US6286042B1",
        "US6353859B1",
        "US6421736B1",
        "US20040044794A1",
        "US20040153701A1",
        "US6865580B1",
        "US20050240737A1",
        "WO2005103928A1",
        "US20050257219A1",
        "US20050262313A1",
        "US20050262513A1",
        "US20060020913A1",
        "US7016918B2",
        "US20060095483A1",
        "US20060242464A1",
        "AU2005236086B2",
        "AU2005236088B2",
        "US7162538B1",
        "AU2005236085B2",
        "AU2005236089B2",
        "US20070101080A1",
        "US20070101057A1",
        "US20070100918A1",
        "US20070100828A1",
        "US20070100954A1",
        "US20070126750A1",
        "US20070174734A1",
        "US7359915B1",
        "US20080114853A1",
        "US20080114943A1",
        "US20080114944A1",
        "US20080114896A1",
        "US20080120477A1",
        "US20080120478A1",
        "US7379947B2",
        "US20080126322A1",
        "US20080126505A1",
        "US20080126703A1",
        "US20080126503A1",
        "US20080123642A1",
        "US20080126502A1",
        "US20080126516A1",
        "US20080133859A1",
        "US20080134189A1",
        "US20080133689A1",
        "US20080133870A1",
        "US20080133690A1",
        "US20080130652A1",
        "US20080133869A1",
        "US20080140975A1",
        "US20080140805A1",
        "US20080155127A1",
        "US20080250221A1",
        "US20080250213A1",
        "US20090055524A1",
        "US20100121935A1",
        "AU2005236087B2",
        "US9268617B1"
    ],
    "citedby_ftf": []
}