{
    "patent_link": "https://patents.google.com/patent/US5418966A/en",
    "patent_id": "US5418966A",
    "title": "Updating replicated objects in a plurality of memory partitions",
    "abstract": "Efficient update and presentation of a plurality of replicated data objects is accomplished with a write lock which moves among the replicas of a data object. After any necessary preparation for updating a data object, a shadow replica requests a write lock from the replica which currently holds the write lock or from the replica designated as the master replica. The write lock is moved to requesting shadow replica which performs an update to itself. The update is then reflected at the local system display to provide visual feedback to the user. The update is propagated to the other replicas which present the change at their associated displays. In the preferred embodiment, the write lock is retained at the replica which last requested the write lock as it is the most likely to receive the next update. While the invention finds particular application in a distributed data processing environment, it can also be used in a single processor having multiple replicas in separate memory partitions.",
    "inventors": [
        "Hari H. Madduri"
    ],
    "assignee": "International Business Machines Corp",
    "classifications": [
        "G06F3/1454",
        "H04L12/1813",
        "G06F3/1423"
    ],
    "claims": "\n1. In a data processing system in which a plurality of replicas of a common data object reside, a method for updating the plurality of replicas, comprising the steps of:\nrequesting a write lock from a first replica which currently holds the write lock, the first replica in a first memory partition in the system;\nmoving the write lock to a second replica, the second replica in a second memory partition in the system;\nperforming an update to the second replica;\nrefreshing a display of the system to reflect the update in at least one of the replicas; and,\npropagating the update to the plurality of replicas.\n2. The method as recited in claim 1 which further comprises the step of retaining the write lock at the second replica.\n3. The method as recited in claim 1 in which the data processing system comprises a plurality of data processing systems coupled to a network and the first replica is in a memory partition in a first data processing system and the second replica is in a memory partition in a second data processing system.\n4. The method as recited in claim 3 wherein a second plurality of replicas of a second common data object reside in the data processing system, further comprising the steps of:\nrequesting a second write lock from a first replica of the second object which currently holds the second write lock;\nmoving the second write lock to a second replica of the second object;\nperforming an update to the second replica of the object;\nrefreshing a display of the system to reflect the update in at least one of the replicas of the second object; and,\npropagating the update to the second plurality of replicas.\n5. The method as recited in claim 1 which further comprises the steps of:\nrequesting the write lock from a master replica;\ndetermining which replica holds the write lock;\nrequesting the write lock from a shadow replica which is holding the write lock;\nreturning the write lock to the master replica.\n6. The method as recited in claim 5 which further comprises the steps of:\ndetermining whether a second update is in process at the shadow replica holding the write lock; completing a second update;\npropagating the second update to the plurality of replicas.\n7. The method as recited in claim 1 which further comprises the steps: determining which replica holds the write lock by a master replica;\nof querying the master replica as to which of the plurality of replicas currently holds the write lock.\n8. The method as recited in claim 1 wherein the first replica is the permanent owner of the write lock and the other replicas are holders of the write lock when they process a local update.\n9. A data processing system in which a plurality of replicas of a common data object reside, comprising:\na first and second memory partition in at least one memory;\na first and a second replica which reside in the first and second memory partitions respectively;\nmeans for requesting a write lock from the first replica which currently holds the write lock;\nmeans for moving the write lock to the second replica;\nmeans for performing an update to the second replica;\nmeans for propagating the update to the plurality of replicas; and,\nmeans for refreshing a display of the system to reflect the update in at least one of the replicas.\n10. The system as recited in claim 9 which further comprises means for retaining the write lock at the second replica.\n11. The system as recited in claim 9 in which the first replica is in a memory partition in a first data processing system and the second replica is in a memory partition in a second data processing system.\n12. The system as recited in claim 9 which further comprises:\nmeans for requesting the write lock from a master replica;\nmeans for determining whether the master replica holds the write lock;\nmeans for requesting the write lock from a shadow replica which is holding the write lock; and,\nmeans for returning the write lock to the master replica.\n13. The system as recited in claim 9 which further comprises means for querying a master replica as to which of the plurality of replicas currently holds the write lock.\n14. The system as recited in claim 13 which further contains means for keeping track of the locations of the plurality of the replicas and which of the replicas is a current holder of the write lock.",
    "status": "Expired - Lifetime",
    "citations_own": [
        "US4506360A",
        "US4562539A",
        "US4805106A",
        "US4961134A",
        "US4965715A",
        "US5055999A",
        "US5220657A",
        "US5226143A",
        "US5274789A"
    ],
    "citations_ftf": [
        "JPH01258170A",
        "US5418966A"
    ],
    "citedby_own": [
        "US5526524A",
        "US5560014A",
        "US5608903A",
        "US5619656A",
        "US5623659A",
        "US5664176A",
        "US5832487A",
        "US5884308A",
        "US5892954A",
        "US5917998A",
        "US6041383A",
        "US20020091800A1",
        "US6505200B1",
        "US6529904B1",
        "US6532479B2",
        "US20040019640A1",
        "US20040111390A1",
        "US6792540B1",
        "US20050240737A1",
        "US20050257219A1",
        "US20050262313A1",
        "US20050262513A1",
        "US20060007944A1",
        "US20060020913A1",
        "US20060031427A1",
        "US20060095483A1",
        "US20060242464A1",
        "US7162689B2",
        "US20070101080A1",
        "US20070101057A1",
        "US20070100828A1",
        "US20070100954A1",
        "US20070126750A1",
        "US20070174734A1",
        "US20080114943A1",
        "US20080114853A1",
        "US20080114944A1",
        "US20080114896A1",
        "US20080120478A1",
        "US20080120477A1",
        "US20080126506A1",
        "US20080126703A1",
        "US20080126508A1",
        "US20080126516A1",
        "US20080126721A1",
        "US20080123642A1",
        "US20080126502A1",
        "US20080134189A1",
        "US20080133871A1",
        "US20080133689A1",
        "US20080130652A1",
        "US20080133869A1",
        "US20080133859A1",
        "US20080140975A1",
        "US20080140805A1",
        "US20080155127A1",
        "US20080250221A1",
        "US20080250213A1",
        "US20090063486A1",
        "US7596563B1",
        "US20100121935A1",
        "EP2702507A2",
        "US20150363424A1",
        "US10235249B1",
        "US20190250976A1",
        "US10561786B2"
    ],
    "citedby_ftf": [
        "US6014667A",
        "US7200623B2",
        "US7930278B2",
        "US6324544B1",
        "US6605732B1",
        "US7409389B2",
        "US8510334B2",
        "CN109472668B"
    ]
}