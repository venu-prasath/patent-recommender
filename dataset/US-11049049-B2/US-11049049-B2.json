{
    "patent_id": "US-11049049-B2",
    "title": "Transforming rules into generalized rules in a rule management system ",
    "assignee": "International Business Machines Corporation",
    "publication_date": "2021-06-29",
    "patent_link": "https://patents.google.com/patent/US11049049B2/en",
    "inventors": [
        "Ulrich Junker",
        "Thierry Kormann"
    ],
    "classifications": [
        "G06Q10/063",
        "G06F16/00",
        "G06F16/903",
        "G06N5/02",
        "G06N5/025",
        "G06Q10/067"
    ],
    "abstract": "An original set of rules are transformed into a resulting set of generalized rules in a rule management system. An original set of rules stored in a data structure for transforming into a resulting set of rules are accessed. The original set of rules is automatically processed by building a compact description of one or more rules in the original set of rules and their actions in the form of logical constraints and solving constraints to find a solution that represents a case and an applied action, building a family of cases by taking all logical tests or their negation that are satisfied by the solution, and generalizing the family of cases by removal of specific logical tests which do not apply to the action, resulting in a most-general rule.",
    "claims": "\n1. A method performed by a computer for transforming an original set of rules into a resulting set of generalized rules in a rule management system, the method comprising the steps of:\nthe computer providing an original set of rules stored in a data structure in memory for transforming into a resulting set of rules;\nthe computer performing an automated processing of the original set of rules by:\nthe computer building a compact description of one or more rules in the original set of rules and one or more actions of the one or more rules in the form of one or more logical constraints and solving constraints to find a solution that represents a case and an applied action;\nthe computer building a family of cases by taking a selection from among at least one of one or more logical tests of the one or more rules that are satisfied by the solution and one or more negations of the one or more logical tests of the one or more rules that are satisfied by the solution;\nthe computer generalizing the family of cases by removing one or more specific logical tests from among the selection that do not limit the applicability of the applied action, to identify a most-general rule; and\nthe computer adding the most-general rule to the resulting set of rules;\nthe computer iterating the automated processing at least one or more times, wherein for each iteration building the compact description of the one or more rules in the original set of rules and the one or more actions excludes any rules in the original set of rules which are addressed by the resulting set of rules; and\nthe computer replacing the original set of rules stored in the data structure in the memory with an equivalent set of generalized rules set in the resulting set of rules for automated application by the rule management system, wherein the size of the resulting set of rules in the memory is smaller than the original set of rules, the original set of rules comprising at least two rules that are not possible to merge into a single rule because the at least two rules comprise a plurality of attributes that impose different tests on more than one of the plurality of attributes, the resulting set of rules comprising at least one most-general rule that is a logical equivalent of the at least two rules.\n2. The method according to claim 1, wherein the computer generalizing the family of cases further comprises:\nthe computer establishing an ordering of the one or more logical tests ordered according from characterization as general tests to more specific tests; and\nthe computer applying a conflict minimizer for computing a selection of relevant tests according to the ordering from among the one or more logical tests by:\nthe computer inspecting each of the one or more logical tests in an inverse of the ordering; and\nthe computer, for each of the one or more logical tests inspected, removing a particular logical test from the family of cases if the particular logical test is not relevant for the applied action, where the particular logical test is relevant for the applied action if removal of the particular logical test would yield a particular case that is not treated by the original set of rules or the original set of rules does not apply the applied action to the particular case.\n3. The method according to claim 1, wherein the computer generalizing the family of cases by removing one or more specific logical tests from among the selection that do not limit the applicability of the applied action, to identify the most-general rule, further comprises:\nthe computer generalizing the family of cases by removing one or more specific logical tests from among the selection that do not limit the applicability of the applied action, to identify the most-general rule, wherein the most-general rule treats at least one case of the family of cases that is treated by the original set of rules, but not yet treated by the resulting set of rules, wherein the most-general rule conforms to the original set of rules as the most-general rules applies only a selection of actions to one or more particular cases that are also applied by the original set of rules to those one or more particular cases.\n4. The method according to claim 1, wherein the computer building the family of cases further comprises:\nthe computer building a residual rule set application graph of one or more residual rules that are treated in the original set of rules but not yet treated in the resulting set of rules, the residual rule set application graph comprising one or more solutions which are represented by one or more graph labels that respect one or more semantics of a plurality of nodes and that label a root note as true, each graph labeling corresponding to a separate case of one or more objects representing a selection of the one or more residual rules, a separate applied action by each case identified by each graph labeling of a separate action node;\nthe computer identifying the solving constraints to find the solution in the residual rule set application graph and extracting the case and the applied action for the solution in the residual rule set application graph; and\nthe computer building the family of cases by taking the selection from among the at least one of one or more logical tests that are satisfied by the extracted case and the one or more negations of the one or more logical tests that are satisfied by the extracted case.\n5. The method according to claim 1, wherein the computer generalizing the family of cases further comprises:\nthe computer generating the family of cases into the most-general rule using one or more explanation-based consistency techniques to identify a selection of one or more relevant logical tests from among the one or more logical tests in the compact description to generalize the family of cases into the most-general rule.\n6. The method according to claim 1, further comprising:\nthe computer removing one or more irrelevant logical tests from among the one or more logical tests, from the original set of rules.\n7. The method according to claim 1, the computer replacing the original set of rules stored in the data structure in the memory with an equivalent set of generalized rules set in the resulting set of rules for automated application by the rule management system, wherein the size of the resulting set of rules is smaller than the original set of rules further comprising:\nthe computer customizing the resulting set of rules in a target rule language in which rule conditions of the resulting set of rules are conjunctions of logical tests of the original set of rules and negations of the logical tests of the original set of rules.\n8. A computer system for transforming an original set of rules into a resulting set of generalized rules in a rule management system, the computer system comprising:\none or more processors, one or more computer-readable memories and one or more computer-readable, tangible storage devices;\nan original set of rules stored in a data structure on the one or more computer-readable memories for transforming into a resulting set of rules;\nprogram instructions, stored on at least one of the one or more storage devices for execution by at least one of the one or more processors via at least one of the one or more memories, to automate rule processing, the program instructions to automate rule processing further comprising:\na residual case detector operative for building a compact description of one or more rules in the original set of rules and one or more actions of the one or more rules in the form of one or more logical constraints and solving constraints to find a solution that represents a case and an applied action and building a family of cases by taking a selection from among at least one of one or more logical tests that are satisfied by the solution and one or more negations of one or more logical tests that are satisfied by the solution;\na treated case generalizer operative for generalizing the family of cases by removing one or more specific logical tests from among the selection that do not limit the applicability of the one or more actions, resulting in a most-general rule; and\na controller operative for adding the most-general rule to the resulting set of rules; and\nprogram instructions, stored on at least one of the one or more storage devices for execution by at least one of the one or more processors via at least one of the one or more memories, to iterate the automated rule processing at least one or more times wherein for each iteration the residual case detector is further operative to build the compact description of the one or more rules in the original set of rules and the one or more actions excludes any rules in the original set of rules which are addressed by the resulting set of rules;\nprogram instructions, stored on at least one of the one or more storage devices for execution by at least one of the one or more processors via at least one of the one or more memories, to replace the original set of rules stored in the data structure with an equivalent set of generalized rules set in the resulting set of rules for automated application by the rule management system, wherein the size of the resulting set of rules on the one or more computer-readable memories is smaller than the original set of rules, the original set of rules comprising at least two rules that are not possible to merge into a single rule because the at least two rules comprise a plurality of attributes that impose different tests on more than one of the plurality of attributes, the resulting set of rules comprising at least one most-general rule that is a logical equivalent of the at least two rules.\n9. The computer system according to claim 8, further comprising:\nthe treated case generalizer operative to establish an ordering of the one or more logical tests ordered from characterization as more general tests to more specific tests; and\nthe treated case generalizer operative to pass this ordering to a conflict minimizer for computing a selection of relevant tests from among the one or more logical tests by:\ninspecting each of the one or more logical tests in an inverse of the ordering; and\nfor each of the one or more logical tests inspected, removing a particular logical test from the family of cases if the particular logical test is not relevant for the applied action, where the particular logical test is relevant for the applied action if removal of the particular logical test would yield a particular case that is not treated by the original set of rules or the original set of rules does not apply the applied action to the particular case.\n10. The computer system according to claim 8, wherein the residual case detector further comprises:\na rule set application modeler operative to build a residual rule set application graph of one or more residual rules that are treated in the original set of rules but not yet treated in the resulting set of rules, the residual rule set application graph comprising one or more solutions which are represented by one or more graph labels that respect one or more semantics of a plurality of nodes and that label a root note as true, each graph labeling corresponding to a separate case of one or more objects representing a selection of the one or more residual rules, a separate applied action by each case identified by each graph labeling of a separate action node;\na logical constraint solver operative to identify the solving constraints to find the solution in the residual rule set application graph and extract the case and the applied action for the solution in the residual rule set application graph; and\na treated case family builder operative to build the family of cases by taking the selection from among the at least one of one or more logical tests that are satisfied by the extracted case and the one or more negations of the one or more logical tests that are satisfied by the extracted case.\n11. The computer system according to claim 8, further comprising:\nthe treated case generalizer operative to use one or more explanation-based consistency techniques to identify a selection of one or more relevant logical tests from among the one or more logical tests in the compact description to generalize the family of cases into the most-general rule.\n12. The computer system according to claim 8, further comprising:\nprogram instructions, stored on at least one of the one or more storage devices for execution by at least one of the one or more processors via at least one of the one or more memories, to remove one or more irrelevant logical tests from among the one or more logical tests, from the original set of rules.\n13. The computer system according to claim 8, further comprising:\nprogram instructions, stored on at least one of the one or more storage devices for execution by at least one of the one or more processors via at least one of the one or more memories, to customize the resulting set of rules in a target rule language in which rule conditions of the resulting set of rules are conjunctions of logical tests of the original set of rules and negations of the logical tests of the original set of rules.\n14. A computer program product for transforming an original set of rules into a resulting set of generalized rules in a rule management system, the computer program product comprising a non-transitory computer readable storage medium having program instructions embodied therewith, the program instructions readable by a processor to cause the processor to:\naccess, by the processor, an original set of rules stored in a data structure in memory for transforming into a resulting set of rules;\nperform an automated processing of the original set of rules by the processor by:\nbuilding, by the processor, a compact description of one or more rules in the original set of rules and one or more actions of the one or more rules in the form of one or more logical constraints and solving constraints to find a solution that represents a case and an applied action;\nbuilding, by the processor, a family of cases by taking a selection from among at least one of one or more logical tests of the one or more rules that are satisfied by the solution and one or more negations of the one or more logical tests of the one or more rules that are satisfied by the solution;\ngeneralizing, by the processor, the family of cases by removing one or more specific logical tests from among the selection that do not limit the applicability of the applied action, to identify a most-general rule; and\nadding, by the processor, the most-general rule to the resulting set of rules;\niterate, by the processor, the automated processing at least one or more times, wherein for each iteration building the compact description of the one or more rules in the original set of rules and the one or more actions excludes any rules in the original set of rules which are addressed by the resulting set of rules; and\nreplace, by the processor, the original set of rules stored in the data structure in the memory with an equivalent set of generalized rules set in the resulting set of rules for automated application by the rule management system, wherein the size of the resulting set of rules in the memory is smaller than the original set of rules, the original set of rules comprising at least two rules that are not possible to merge into a single rule because the at least two rules comprise a plurality of attributes that impose different tests on more than one of the plurality of attributes, the resulting set of rules comprising at least one most-general rule that is a logical equivalent of the at least two rules.\n15. The computer program product according to claim 14, further comprising program instructions readable by a processor to cause the processor to:\nestablish, by the processor, an ordering of the one or more logical tests ordered according from characterization as general tests to more specific tests; and\napply, by the processor, a conflict minimizer for computing a selection of relevant tests according to the ordering from among the one or more logical tests by:\ninspect, by the processor, each of the one or more logical tests in an inverse of the ordering; and\nfor each of the one or more logical tests inspected, remove, by the processor, a particular logical test from the family of cases if the particular logical test is not relevant for the applied action, where the particular logical test is relevant for the applied action if removal of the particular logical test would yield a particular case that is not treated by the original set of rules or the original set of rules does not apply the applied action to the particular case.\n16. The computer program product according to claim 14, further comprising program instructions readable by a processor to cause the processor to:\ngeneralize, by the processor, the family of cases by removing one or more specific logical tests from among the selection that do not limit the applicability of the applied action, to identify the most-general rule, wherein the most-general rule treats at least one case of the family of cases that is treated by the original set of rules, but not yet treated by the resulting set of rules, wherein the most-general rule conforms to the original set of rules as the most-general rules applies only a selection of actions to one or more particular cases that are also applied by the original set of rules to those one or more particular cases.\n17. The computer program product according to claim 14, further comprising program instructions readable by a processor to cause the processor to:\nbuild, by the processor, a residual rule set application graph of one or more residual rules that are treated in the original set of rules but not yet treated in the resulting set of rules, the residual rule set application graph comprising one or more solutions which are represented by one or more graph labels that respect one or more semantics of a plurality of nodes and that label a root note as true, each graph labeling corresponding to a separate case of one or more objects representing a selection of the one or more residual rules, a separate applied action by each case identified by each graph labeling of a separate action node;\nidentify, by the processor, the solving constraints to find the solution in the residual rule set application graph and extracting the case and the applied action for the solution in the residual rule set application graph; and\nbuild, by the processor, the family of cases by taking the selection from among the at least one of one or more logical tests that are satisfied by the extracted case and the one or more negations of the one or more logical tests that are satisfied by the extracted case.\n18. The computer program product according to claim 14, further comprising program instructions readable by a processor to cause the processor to:\ngenerate, by the processor, the family of cases into the most-general rule using one or more explanation-based consistency techniques to identify a selection of one or more relevant logical tests from among the one or more logical tests in the compact description to generalize the family of cases into the most-general rule.\n19. The computer program product according to claim 14, further comprising program instructions readable by a processor to cause the processor to:\nremove, by the processor, one or more irrelevant logical tests from among the one or more logical tests, from the original set of rules.\n20. The computer program product according to claim 14, further comprising program instructions readable by a processor to cause the processor to:\ncustomize, by the processor, the resulting set of rules in a target rule language in which rule conditions of the resulting set of rules are conjunctions of logical tests of the original set of rules and negations of the logical tests of the original set of rules."
}