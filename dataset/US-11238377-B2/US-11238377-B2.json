{
    "patent_id": "US-11238377-B2",
    "title": "Techniques for integrating segments of code into machine-learning model ",
    "assignee": "Oracle International Corporation",
    "publication_date": "2022-02-01",
    "patent_link": "https://patents.google.com/patent/US11238377B2/en",
    "inventors": [
        "Alberto Polleri",
        "Sergio Aldea Lopez",
        "Marc Michiel Bron",
        "Dan David Golding",
        "Alexander Ioannides",
        "Maria del Rosario Mestre",
        "Hugo Alexandre Pereira Monteiro",
        "Oleg Gennadievich Shevelev",
        "Larissa Cristina Dos Santos Romualdo Suzuki",
        "Xiaoxue Zhao",
        "Matthew Charles Rowe"
    ],
    "classifications": [
        "H04L9/0894",
        "G06F11/3003",
        "G06F11/3006",
        "G06F11/302",
        "G06F11/3409",
        "G06F11/3433",
        "G06F11/3452",
        "G06F11/3466",
        "G06F16/211",
        "G06F16/2365",
        "G06F16/24573",
        "G06F16/24578",
        "G06F16/285",
        "G06F16/367",
        "G06F16/9024",
        "G06F16/9035",
        "G06F16/907",
        "G06F18/10",
        "G06F18/2115",
        "G06F18/213",
        "G06F18/2155",
        "G06F8/75",
        "G06F8/77",
        "G06K9/6231",
        "G06K9/6232",
        "G06K9/6259",
        "G06K9/6298",
        "G06N20/00",
        "G06N20/20",
        "G06N5/003",
        "G06N5/01",
        "G06N5/025",
        "H04L9/088",
        "H04L9/3236",
        "G06N5/022"
    ],
    "abstract": "A server system may match a segment of code for a code integration request to metadata about similar segments of code, wherein the metadata qualifies one or more outcomes of previous integration requests. The server may determine usage rights and rules based on the metadata, wherein some of the usage rights and rules have previously have been approved by a multi-approval workflow that enforces a predetermined process to authorize use of the segment of code for code segment integrations. The server may analyze the metadata to predict an integration score based at least in part on the usage rights and rules of the segments of code. If the integration score of the segment of code exceeds a threshold, the system may automatically generate a data structure for deploying the segment of code, wherein the automatically generating the data structure is performed without the multi-approval workflow.",
    "claims": "\n1. A method performed by a server for training a machine-learning model to generate predictive outcomes for integrating a segment of code into a program, the method comprising:\nmatching a segment of code for a code integration request to metadata about similar segments of code, wherein the metadata quantifies one or more outcomes of previous integration requests;\ndetermining usage rights and rules based on the metadata, wherein some of the usage rights and rules have previously been approved by a multi-approval workflow that enforces a predetermined process to authorize use of the segment of code for code segment integrations;\nanalyzing the metadata to predict an integration score based at least in part on the usage rights and rules of the segments of code;\nif the integration score of the segment of code exceeds a threshold, automatically generating a data structure for deploying the segment of code, wherein the automatically generating the data structure is performed without the multi-approval workflow; and\nstoring the data structure in a memory.\n2. The method of claim 1, further comprising:\nadding initial data to the data structure, wherein the server is configured to consume data based on the integration with the segment of code;\nreceiving additional data from one or more external data sources; and\nadding the additional data to the data structure, wherein the data structure operates using both the initial data and the additional data.\n3. The method of claim 1, wherein the integration score of successfully integrating the segment of code is based at least in part on detecting security vulnerabilities in the segment of code.\n4. The method of claim 1, wherein the integration score of successfully integrating the segment of code is based at least in part on costs associated with the segments of code.\n5. The method of claim 1, wherein the integration score of successfully integrating the segment of code is based at least in part on one or more software dependencies associated with the segments of code.\n6. The method of claim 1, further comprising:\napplying one or more weights to segments of code based at least in part on a date of code development, wherein the one or more weights prefer older developed segments of code based on concerns for stability and backwards compatibility.\n7. The method of claim 1, wherein the machine-learning model is incorporated into a plugin component of a software development environment.\n8. A server system for training a machine-learning model to generate predictive outcomes for integrating a segment of code into a program, comprising:\none or more memories storing instructions; and\none or more processors communicatively coupled to the one or more memories the one or more processors configured to execute the instructions to conduct operations to:\nmatching a segment of code for a code integration request to metadata about similar segments of code, wherein the metadata quantifies one or more outcomes of previous integration requests;\ndetermining usage rights and rules based on the metadata, wherein some of the usage rights and rules have previously been approved by a multi-approval workflow that enforces a predetermined process to authorize use of the segment of code for code segment integrations;\nanalyzing the metadata to predict an integration score based at least in part on the usage rights and rules of the segments of code;\nif the integration score of the segment of code exceeds a threshold, automatically generating a data structure for deploying the segment of code, wherein the automatically generating the data structure is performed without the multi-approval workflow; and\nstoring the data structure in a memory.\n9. The server system of claim 8, further comprising:\nadding initial data to the data structure, wherein the server system is configured to consume data based on the integration with the segment of code;\nreceiving additional data from one or more external data sources; and\nadding the additional data to the data structure, wherein the data structure operates using both the initial data and the additional data.\n10. The server system of claim 8, wherein the integration score of successfully integrating the segment of code is based at least in part on detecting security vulnerabilities in the segment of code.\n11. The server system of claim 8, wherein the integration score of successfully integrating the segment of code is based at least in part on costs associated with the segments of code.\n12. The server system of claim 8, wherein the integration score of successfully integrating the segment of code is based at least in part on one or more software dependencies associated with the segments of code.\n13. The server system of claim 8, further comprising:\napplying one or more weights to segments of code based at least in part on a date of code development, wherein the one or more weights prefer older developed segments of code based on concerns for stability and backwards compatibility.\n14. The server system of claim 8, wherein the machine-learning model is incorporated into a plugin component of a software development environment.\n15. A non-transitory computer-readable medium storing instructions for training a machine-learning model to generate predictive outcomes for integrating a segment of code into a program, the instructions comprising:\none or more instructions that, when executed by one or more processors, cause the one or more processors to conduct operations to:\nmatching a segment of code for a code integration request to metadata about similar segments of code, wherein the metadata quantifies one or more outcomes of previous integration requests;\ndetermining usage rights and rules based on the metadata, wherein some of the usage rights and rules have previously been approved by a multi-approval workflow that enforces a predetermined process to authorize use of the segment of code for code segment integrations;\nanalyzing the metadata to predict an integration score based at least in part on the usage rights and rules of the segments of code;\nif the integration score of the segment of code exceeds a threshold, automatically generating a data structure for deploying the segment of code, wherein the automatically generating the data structure is performed without the multi-approval workflow; and\nstoring the data structure in a memory.\n16. The non-transitory computer-readable medium of claim 15, further comprising:\nadding initial data to the data structure, wherein a server system is configured to consume data based on the integration with the segment of code;\nreceiving additional data from one or more external data sources; and\nadding the additional data to the data structure, wherein the data structure operates using both the initial data and the additional data.\n17. The non-transitory computer-readable medium of claim 15, wherein the integration score of successfully integrating the segment of code is based at least in part on detecting security vulnerabilities in the segment of code.\n18. The non-transitory computer-readable medium of claim 15, wherein the integration score of successfully integrating the segment of code is based at least in part on costs associated with the segments of code.\n19. The non-transitory computer-readable medium of claim 15, wherein the integration score of successfully integrating the segment of code is based at least in part on one or more software dependencies associated with the segments of code.\n20. The non-transitory computer-readable medium of claim 15, further comprising:\napplying one or more weights to segments of code based at least in part on a date of code development, wherein the one or more weights prefer older developed segments of code based on concerns for stability and backwards compatibility."
}