{
    "patent_id": "US-11416603-B2",
    "title": "Methods, systems, articles of manufacture and apparatus to detect process hijacking ",
    "assignee": "Intel Corporation",
    "publication_date": "2022-08-16",
    "patent_link": "https://patents.google.com/patent/US11416603B2/en",
    "inventors": [
        "Zheng Zhang",
        "Jason Martin",
        "Justin Gottschlich",
        "Abhilasha Bhargav-Spantzel",
        "Salmin Sultana",
        "Li Chen",
        "Wei Li",
        "Priyam Biswas",
        "Paul Carlson"
    ],
    "classifications": [
        "G06F21/52",
        "G06F21/51",
        "G06F21/566",
        "G06F21/567",
        "G06N20/00",
        "G05B23/0245",
        "G06F2221/033"
    ],
    "abstract": "Methods, systems, articles of manufacture and apparatus to detect process hijacking are disclosed herein. An example apparatus to detect control flow anomalies includes a parsing engine to compare a target instruction pointer (TIP) address to a dynamic link library (DLL) module list, and in response to detecting a match of the TIP address to a DLL in the DLL module list, set a first portion of a normalized TIP address to a value equal to an identifier of the DLL. The example apparatus disclosed herein also includes a DLL entry point analyzer to set a second portion of the normalized TIP address based on a comparison between the TIP address and an entry point of the DLL, and a model compliance engine to generate a flow validity decision based on a comparison between (a) the first and second portion of the normalized TIP address and (b) a control flow integrity model.",
    "claims": "\n1. An apparatus to detect control flow anomalies, the apparatus comprising:\nparsing engine circuitry to:\nperform a first comparison between a raw target instruction pointer (TIP) address and a dynamic link library (DLL) module list; and\nin response to detecting a match of the raw TIP address to a DLL in the DLL module list, convert the raw TIP address to a normalized TIP address by setting a first portion of the normalized TIP address to a value equal to an identifier of the DLL;\nDLL entry point analyzing circuitry to set a second portion of the normalized TIP address based on a second comparison between the raw TIP address and an entry point of the DLL; and\nmodel compliance engine circuitry to generate a flow validity decision based on a third comparison between (a) the first portion and the second portion of the normalized TIP address and (b) a control flow integrity model.\n2. The apparatus as defined in claim 1, further including telemetry retrieving circuitry to retrieve the raw TIP address from a platform kernel.\n3. The apparatus as defined in claim 1, further including DLL load detecting circuitry to detect a load occurrence of the DLL on a platform executing an application.\n4. The apparatus as defined in claim 1, wherein the DLL entry point analyzing circuitry is to set the second portion of the normalized TIP address as an offset address corresponding to a DLL marker entry point.\n5. The apparatus as defined in claim 1, further including application programming interface (API) analyzing circuitry to determine if the raw TIP address corresponds to an exported API associated with the DLL.\n6. The apparatus as defined in claim 5, wherein the API analyzing circuitry is to set the second portion of the normalized TIP address as an offset based on a sum of (a) a marker export value of the exported API and (b) an ordinal value of the exported API.\n7. The apparatus as defined in claim 1, further including telemetry retrieving circuitry to retrieve telemetry information as at least one of processor trace information, performance monitor unit event information, last branch record information, or operating system runtime event information.\n8. The apparatus as defined in claim 7, wherein the telemetry retrieving circuitry is to detect control flow violation occurrences that are inconsistent with at least one of coarse-grain control flow models or fine-grain control flow models.\n9. A non-transitory computer readable storage medium comprising computer readable instructions that, when executed, cause at least one processor to:\nperform a first comparison between a raw target instruction pointer (TIP) address and a dynamic link library (DLL) module list;\nin response to detecting a match of the raw TIP address to a DLL in the DLL module list, convert the raw TIP address to a normalized TIP address by setting a first portion of the normalized TIP address to a value equal to an identifier of the DLL;\nset a second portion of the normalized TIP address based on a second comparison between the raw TIP address and an entry point of the DLL; and\ngenerate a flow validity decision based on a third comparison between (a) the first portion and the second portion of the normalized TIP address and (b) a control flow integrity model.\n10. The non-transitory computer readable storage medium as defined in claim 9, wherein the instructions, when executed, further cause the processor to detect a load occurrence of the DLL on a platform executing an application.\n11. The non-transitory computer readable storage medium as defined in claim 10, wherein the instructions, when executed, further cause the processor to extract metadata associated with the DLL in response to the load occurrence.\n12. The non-transitory computer readable storage medium as defined in claim 9, wherein the instructions, when executed, further cause the processor to generate the flow validity decision in connection with at least one of telemetry information and machine learning models.\n13. The non-transitory computer readable storage medium as defined in claim 9, wherein the instructions, when executed, further cause the processor to train the control flow integrity model without at least one of static code analysis or malicious code characterization.\n14. The non-transitory computer readable storage medium as defined in claim 9, wherein the instructions, when executed, further cause the processor to transform at least one control flow anomaly sequence to a frequency domain signal.\n15. The non-transitory computer readable storage medium as defined in claim 14, wherein the instructions, when executed, further cause the processor to identify at least one of benign or malicious control flow violations by applying the frequency domain signal to at least one of a machine learning algorithm or a digital signal processing algorithm.\n16. A system to detect control flow anomalies, the system comprising:\nmeans for parsing to:\nperform a first comparison between a raw target instruction pointer (TIP) address and a dynamic link library (DLL) module list; and\nin response to detecting a match of the raw TIP address to a DLL in the DLL module list, convert the raw TIP address to a normalized TIP address by setting a first portion of the normalized TIP address to a value equal to an identifier of the DLL;\nmeans for DLL analyzing to set a second portion of the normalized TIP address based on a second comparison between the TIP address and an entry point of the DLL; and\nmeans for modeling to generate a flow validity decision based on a third comparison between (a) the first portion and the second portion of the normalized TIP address and (b) a control flow integrity model.\n17. The system as defined in claim 16, further including means for telemetry retrieving to retrieve the raw TIP address from a platform kernel.\n18. The system as defined in claim 16, further including means for load detection to detect a load occurrence of the DLL on a platform executing an application.\n19. The system as defined in claim 18, wherein the means for load detection are to extract metadata associated with the DLL in response to the load occurrence.\n20. The system as defined in claim 16, wherein the means for DLL analyzing are to set the second portion of the normalized TIP address as an offset address corresponding to a DLL marker entry point.\n21. A computer implemented method to detect control flow anomalies, the method comprising:\nperforming a first comparison between a raw target instruction pointer (TIP) address and a dynamic link library (DLL) module list;\nin response to detecting a match of the raw TIP address to a DLL in the DLL module list, converting the raw TIP address to a normalized TIP address by setting a first portion of the normalized TIP address to a value equal to an identifier of the DLL;\nsetting a second portion of the normalized TIP address based on a second comparison between the raw TIP address and an entry point of the DLL; and\ngenerating a flow validity decision based on a third comparison between (a) the first portion and the second portion of the normalized TIP address and (b) a control flow integrity model.\n22. The computer implemented method as defined in claim 21, further including retrieving the raw TIP address from a platform kernel.\n23. The computer implemented method as defined in claim 21, further including detecting a load occurrence of the DLL on a platform executing an application.\n24. The computer implemented method as defined in claim 23, further including extracting metadata associated with the DLL in response to the load occurrence.\n25. The computer implemented method as defined in claim 21, further including setting the second portion of the normalized TIP address as an offset address corresponding to a DLL marker entry point."
}