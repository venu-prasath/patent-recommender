{
    "patent_id": "US-11544099-B2",
    "title": "Analytic model execution engine with instrumentation for granular performance analysis for metrics and diagnostics for troubleshooting ",
    "assignee": "Modelop, Inc.",
    "publication_date": "2023-01-03",
    "patent_link": "https://patents.google.com/patent/US11544099B2/en",
    "inventors": [
        "Stuart Bailey",
        "Matthew Mahowald",
        "Maksym Kharchenko"
    ],
    "classifications": [
        "G06F9/45558",
        "G06F8/31",
        "G06F8/51",
        "G06F8/60",
        "G06F9/455",
        "G06F9/45504",
        "G06F9/5077",
        "G06N20/20",
        "G06N5/01",
        "G06F8/30",
        "G06N20/00",
        "G06N5/003",
        "G06Q10/067"
    ],
    "abstract": "At an interface an analytic model for processing data is received. The analytic model is inspected to determine a language, an action, an input type, and an output type. A virtualized execution environment is generated for an analytic engine that includes executable code to implement the analytic model for processing an input data stream.",
    "claims": "\n1. A system, comprising:\nan interface;\na processor configured to:\nreceive, at the interface, an analytic model for processing; an input data stream;\ninspect the analytic model to determine a programming language of the analytic model, an action to be performed on the input data stream, a type of the input data stream, and a type of an output data stream;\ngenerate a virtualized execution environment (VEE), the VEE including executable code to implement the analytic model, the implemented analytic model for processing the input data stream;\nadd, at runtime of the VEE, a sensor to instrument the implemented analytic model, wherein the sensor is configured to instrument the VEE for an analytic engine, wherein the sensor provides metrics for debugging a performance of the analytic model;\ndebug the performance of the analytic model until the analytic engine is optimized and at least one bug is eradicated from the analytic model; and\nremove the sensor via the interface after a determination that the sensor is no longer required for the debugging; and\na memory coupled to the processor and configured to provide the processor with instructions.\n2. The system recited in claim 1, wherein the analytic model is implemented using a container to provide the VEE for the analytic engine.\n3. The system recited in claim 2, wherein the container is a portable and independently executable microservice.\n4. The system recited in claim 1, wherein the analytic model includes an input configuration schema that specifies the type of the input data stream, an output configuration schema that specifies the type of the output data stream, and an I/O descriptor abstraction that specifies abstracts the input data stream type.\n5. The system recited in claim 1, wherein the VEE includes a plurality of runtime engines that each supports a distinct analytic model programming language.\n6. The system recited in claim 4, wherein the processor is further configured to:\nbind the analytic model and the I/O descriptor abstraction;\nreceive the input data stream at a stream processor;\nprocess the input data stream using the executable code that implements the analytic model, wherein the stream processor enforces the type of the input data stream; and\ngenerate the output data stream using the stream processor based on the type of the output data stream, wherein the output data stream includes a score and/or a metric.\n7. The system recited in claim 1, wherein the interface for receiving the analytic model includes an Application Programming Interface (API), a Command Line Interface (CLI), and/or a dashboard interface.\n8. The system recited in claim 5, wherein the analytic model is coded in a first programming language, and wherein the processor is further configured to:\ntranslate the first programming language to a first analytic model programming language; and\nroute the executable code to one of the plurality of runtime engines based on the first analytic model programming language.\n9. A method, comprising:\nreceiving at an interface an analytic model for processing an input data stream;\ninspecting the analytic model to determine a programming language of the analytic model, an action to be performed on the input data stream, a type of the input data stream, and a type of an output data stream;\ngenerating a virtualized execution environment (VEE), the VEE including executable code to implement the analytic model, the implemented analytic model for processing the input data stream;\nadding, at runtime of the VEE, a sensor to the implemented analytic model, the sensor to instrument the VEE for an analytic engine, wherein the sensor provides metrics for debugging a performance of the analytic model;\ndebugging the performance of the analytic model until the analytic engine is optimized and at least one bug is eradicated from the analytic model; and\nremoving the sensor via the interface after determining that the sensor is no longer required for the debugging.\n10. The method of claim 9, wherein the analytic model is implemented using a container to provide the VEE for the analytic engine.\n11. The method of claim 10, wherein the container is a portable and independently executable microservice.\n12. The method of claim 9, wherein the analytic model includes an input configuration schema that specifies the type of the input data stream, an output configuration schema that specifies the type of the output data stream, and an I/O descriptor abstraction that abstracts the input data stream type.\n13. The method of claim 9, wherein the VEE for the analytic engine includes a plurality of runtime engines that each supports a distinct analytic model language.\n14. A computer program product, the computer program product being embodied in a tangible non-transitory computer readable storage medium and comprising computer instructions for:\nreceiving at an interface an analytic model for processing an input data stream;\ninspecting the analytic model to determine a programming language of the analytic model, an action to be performed on the input data stream, a type of the input data stream, and a type of an output data stream;\ngenerating a virtualized execution environment (VEE), the VEE including executable code to implement the analytic model, the implemented analytic model for processing the input data stream;\nadding, at runtime of the VEE, a sensor to the implemented analytic model, the sensor to instrument the VEE for an analytic engine, wherein the sensor provides metrics for debugging a performance of the analytic model;\ndebugging the performance of the analytic model until the analytic engine is optimized and at least one bug is eradicated from the analytic model; and\nremoving the sensor via the interface after determining that the sensor is no longer required for the debugging.\n15. The computer program product recited in claim 14, wherein the analytic model is implemented using a container to provide the VEE for the analytic engine.\n16. The computer program product recited in claim 15, wherein the container is a portable and independently executable microservice.\n17. The computer program product recited in claim 14, wherein the analytic model includes an input configuration schema that specifies the type of the input data stream, an output configuration schema that specifies the type of the output data stream, and an I/O descriptor abstraction that abstracts the input data stream type.\n18. The computer program product recited in claim 14, wherein the VEE for the analytic engine includes a plurality of runtime engines that each supports a distinct analytic model language."
}