{
    "patent_link": "https://patents.google.com/patent/US5050075A/en",
    "patent_id": "US5050075A",
    "title": "High performance VLSI data filter",
    "abstract": "A single chip high speed VLSI data filter is disclosed. The data filter performs relational and simple numeric operations on a high speed input data stream using a unique instruction set containing no branching instructions.",
    "inventors": [
        "Gary E. Herman",
        "Kuo-Chu Lee",
        "Takako Matoba"
    ],
    "assignee": "Nytell Software LLC",
    "classifications": [
        "G06F7/026",
        "G06F16/24568",
        "Y10S707/99936"
    ],
    "claims": "\n1. A data filter for performing queries on a high speed data stream organized into a sequence of records which form a database, said data filter comprising\nbuffer means for receiving and buffering each of said records forming the high speed data stream in sequence,\nmemory means for storing a batch of instructions arranged in a specific order for carrying out a query in response to a request for information from the database,\npipelined processing means in communication with said buffer means and said memory means for executing said instructions stored in said memory in said specific order for each of said records while each record is buffered in said buffer means, and\nintermediate result accumulation means in communication with said processing means for storing an output of said processing means resulting from the execution of particular ones of said instructions by said processing means and for providing an input to said processing means for enabling said processing means to execute subsequent ones of said instructions depending on the contents of the intermediate result accumulation means.\n2. The data filter of claim 1\nwherein at least some of the instructions stored in said memory means include a pattern and an address indicating a portion of each record to be compared with the pattern, a first opcode for indicating a test to be performed on an output of the comparison, and a second opcode indicating an operation to be performed on an output of said test, and\nwherein said pipelined processing means comprises an arithmetic logic unit for performing said comparison, means for performing said test on the output of said comparison, and means for performing said operation on an output of said test and for storing the output of said operation in said intermediate result accumulation means.\n3. The data filter of claim 2 wherein said operation utilizes as a first input the output of said test and as a second input the contents of said intermediate result accumulation means.\n4. The data filter of claim 2 wherein said instructions stored in said memory include a conditional assignment instruction in which said arithmetic logic unit performs an operation on first and second operands stored in said filter depending on the contents of said intermediate result accumulation means.\n5. The data filter of claim 1 wherein said intermediate result accumulation means comprises a one-bit storage means for storing a logic \"1\" or a logic \"0\".\n6. The data filter of claim 1 wherein said intermediate result accumulation means comprises a stack.\n7. The data filter of claim 1 wherein said pipelined processing means is in communication with said memory means via a decoder for decoding said instructions.\n8. A data filtering method for performing queries on a high speed data stream comprising a plurality of records which form a database, said method comprising the steps of\nbuffering in a buffer each of the records comprising said high speed data stream in a sequence,\nstoring in a memory a batch of instructions arranged in a specific order for carrying out a query on the records of said high speed data stream in response to a request for information from said database,\nexecuting said instructions stored in said memory utilizing a pipelined processor in said specific order for each of said records while each record is buffered in said buffer, said pipelined processor being in communication with said buffer and said memory, and\nstoring an output of said processor resulting from the execution of particular ones of said instructions by said pipelined processor in an intermediate result accumulator in communication with said processor and utilizing the contents of said intermediate result accumulator as an input to said processor for the execution of subsequent ones of said instructions depending on the contents of said intermediate result accumulator.\n9. The method of claim 8 wherein the step of executing at least one of said instructions comprises the steps of comparing a pattern contained in the instruction with data contained in the record currently in the buffer, performing a test on an output of the comparison in accordance with a first opcode contained in the instruction, performing an operation on an output of the test in accordance with a second opcode contained in the instruction, and storing the output of said operation in said intermediate result accumulator.\n10. The method of claim 9 wherein the inputs to said operation are the output of said test and the current contents of said intermediate result accumulator.\n11. The method of claim 9 wherein one of said instructions stored in said memory is a conditional assignment in which case said execution step comprises\nperforming an operation on an operand contained in said filter depending on the contents of said intermediate result accumulator.",
    "status": "Expired - Lifetime",
    "citations_own": [
        "US4241402A",
        "US4384325A",
        "US4450520A",
        "US4464718A",
        "US4504907A"
    ],
    "citations_ftf": [],
    "citedby_own": [
        "US5226165A",
        "US5263156A",
        "US5317730A",
        "US5388259A",
        "US5469551A",
        "US5519860A",
        "US5530939A",
        "US5561794A",
        "US5590362A",
        "US5832519A",
        "WO2001044920A2",
        "US20010011213A1",
        "US20020097794A1",
        "US20020108001A1",
        "US20020122474A1",
        "US20020174242A1",
        "US20030018630A1",
        "US6557061B1",
        "US20030221013A1",
        "US6711206B1",
        "US6711558B1",
        "US6711205B1",
        "US20040059725A1",
        "US20040189718A1",
        "US20040215593A1",
        "WO2005026925A2",
        "US20060155852A1",
        "US20060294059A1",
        "US20070067108A1",
        "US20070130140A1",
        "US20070192568A1",
        "US20070260602A1",
        "US20080086274A1",
        "US20080222193A1",
        "US20090182683A1",
        "US7602785B2",
        "US20090287628A1",
        "US7660793B2",
        "US7711844B2",
        "US7716330B2",
        "US7840482B2",
        "US7921046B2",
        "US7954114B2",
        "US7970722B1",
        "US8326819B2",
        "US8762249B2",
        "US9633093B2",
        "US9633097B2",
        "US9990393B2",
        "WO2018119035A1",
        "US10037568B2",
        "US10121196B2",
        "US10146845B2",
        "US10572824B2",
        "US10650452B2",
        "US10902013B2",
        "US10942943B2",
        "US11436672B2"
    ],
    "citedby_ftf": []
}