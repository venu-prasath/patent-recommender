{
    "patent_id": "US-8001070-B2",
    "title": "Object oriented rule-based system and method ",
    "assignee": "Honeywell International Inc.",
    "publication_date": "2011-08-16",
    "patent_link": "https://patents.google.com/patent/US8001070B2/en",
    "inventors": [
        "Rui Zhang",
        "Conrad Bruce Beaulieu",
        "John Hajdukiewicz"
    ],
    "classifications": [],
    "abstract": "An object oriented rule-based system and method that combines rule-based technology and object-oriented programming in order to provide an efficient approach for adding decision-making and inferencing capabilities to different applications. The rule-based system can include a RETE match algorithm, which can be modified to support pure object-based variable pattern matching. The LHS of a rule base can be compiled into several condition patterns, which includes a transformer integer array in order to record object variables positions. A RETE node can propagate tokens smoothly by asserting the object variable based on inheritance type hierarchy and the rules can be fired when the conditions are satisfied. The object oriented rule system can be utilized to add or remove rules at run time.",
    "claims": "\n1. A computer-implemented method for combining rule-based technology and object oriented programming, comprising:\ninstantiating a rule-based module comprising a plurality of rules utilizing a compiled domain model, wherein said rule-based module comprises an object-oriented representation of said compiled domain model;\ncompiling a Left-Hand Side (LHS) of said rule-based module into at least one condition pattern utilizing a rule compiler wherein said condition pattern includes a transformer field, which comprises an integer array for recording the position of a plurality of object variables of said LHS within said condition pattern; and\ngenerating a tree structure by loading said compiled domain model and said at least one condition pattern associated with said rule-based module and propagating a plurality of tokens by asserting said plurality of object variables based on inheritance type hierarchy wherein said plurality of tokens end at a terminal node.\n2. The computer-implemented structure of claim 1 wherein said tree structure comprises a RETE tree.\n3. The computer-implemented method of claim 1 further comprising;\nimplementing said rule compiler utilizing an object oriented programming language; and\narranging a position of said plurality of tokens utilizing said transformer field.\n4. The computer-implemented method of claim 1 wherein said tree structure comprises a plurality of nodes arranged as a series of linked nodes.\n5. The method of claim 1 wherein said rule compiler compiles an intermediate format of said rules-based module into a binary component utilized in a target object-oriented environment.\n6. The computer-implemented method of claim 1 wherein said rule-based module is capable of being added and removed during run-time.\n7. The computer-implemented method of claim 1 wherein said plurality of nodes comprises a type node, an alpha pattern node, a beta pattern node and said terminal node.\n8. The computer-implemented method of claim 7 wherein said type node comprises a root node that filters said plurality of object variables based on a particular object type.\n9. A system, comprising:\na processor;\na data bus coupled to said processor; and\na computer-usable medium embodying computer code, said computer-usable medium being coupled to said data bus, said computer program code comprising instructions executable by said processor and configured for:\ninstantiating a rule-based module comprising a plurality of rules utilizing a compiled domain model, wherein said rule-based module comprises an object-oriented representation of said compiled domain model;\ncompiling a LHS of said rule-based module into at least one condition pattern utilizing a rule compiler wherein said condition pattern includes a transformer field, which comprises an integer array for recording the position of a plurality of object variables of said LHS within said condition pattern; and\ngenerating a tree structure by loading said compiled domain model and said at least one condition pattern associated with said rule-based module and propagating a plurality of tokens by asserting said plurality of object variables based on inheritance type hierarchy wherein said plurality of tokens end at a terminal node.\n10. The system of claim 9 wherein said tree structure comprises a RETE tree.\n11. The system of claim 9, wherein said instructions are further configured for:\nimplementing said rule compiler utilizing an object oriented programming language; and\narranging a position of said plurality of tokens utilizing said transformer field.\n12. The system of claim 9 wherein said tree structure comprises a plurality of nodes arranged as a series of linked nodes.\n13. The system of claim 9 wherein said instructions are further configured for permitting said rule compiler to compile an intermediate format of said rules-based module into a binary component utilized in a target object-oriented environment.\n14. The system of claim 9 wherein said rule-based module is capable of being added and removed during run-time.\n15. The system of claim 9 wherein said plurality of nodes comprises a type node, an alpha pattern node, a beta pattern node and said terminal node.\n16. The system of claim 15 wherein said type node comprises a root node that filters said plurality of object variables based on a particular object type.\n17. A non-transitory computer-usable medium embodying computer program code, said computer program code comprising computer executable instructions configured for:\ninstantiating a rule-based module comprising a plurality of rules utilizing a compiled domain model, wherein said rule-based module comprises an object-oriented representation of said compiled domain model;\ncompiling a LHS of said rule-based module into at least one condition pattern utilizing a rule compiler wherein said condition pattern includes a transformer field, which comprises an integer array for recording the position of a plurality of object variables of said LHS within said condition pattern; and\ngenerating a tree structure by loading said compiled domain model and said at least one condition pattern associated with said rule-based module and propagating a plurality of tokens by asserting said plurality of object variables based on inheritance type hierarchy wherein said plurality of tokens end at a terminal node.\n18. The computer-usable medium of claim 17, wherein said tree structure comprises a RETE tree.\n19. The computer-usable medium of claim 17, wherein said embodied computer program code further comprises computer executable instructions configured for:\nimplementing said rule compiler utilizing an object oriented programming language; and\narranging a position of said plurality of tokens utilizing said transformer field.\n20. The computer-usable medium of claim 17, wherein said tree structure comprises a plurality of nodes arranged as a series of linked nodes.",
    "status": "Active",
    "citations_own": [
        "US4849905A",
        "US5159662A",
        "US5241652A",
        "US5265193A",
        "US6078911A",
        "US20040034848A1",
        "US20040083454A1",
        "US20050154695A1",
        "US20050165707A1",
        "US20050240546A1",
        "US20050246302A1",
        "US20050262032A1",
        "US20070038775A1",
        "US20070094193A1",
        "US20080097748A1",
        "US20080147584A1",
        "US20080222070A1",
        "US20080249860A1",
        "US20080301078A1",
        "US20080301079A1",
        "US20090063385A1",
        "US7603358B1"
    ],
    "citations_ftf": [],
    "citedby_own": [
        "US9070174B2",
        "US9251071B2",
        "US10339480B2"
    ],
    "citedby_ftf": [
        "US8732108B2",
        "US10216553B2",
        "US8930298B2",
        "GB2509539A",
        "US9286570B2",
        "US9965723B2",
        "WO2018211501A1",
        "US10599985B2",
        "CN110472230B"
    ]
}