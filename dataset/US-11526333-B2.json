{
    "patent_id": "US-11526333-B2",
    "title": "Graph outcome determination in domain-specific execution environment ",
    "assignee": "Digital Asset Capital, Inc.",
    "publication_date": "2022-12-13",
    "patent_link": "https://patents.google.com/patent/US11526333B2/en",
    "inventors": [
        "Edward Hunter"
    ],
    "classifications": [
        "G06F21/64",
        "G06F8/33",
        "G06F16/9024",
        "G06F17/18",
        "G06F8/65",
        "G06F9/44505",
        "G06F9/5038",
        "G06F9/547",
        "G06N3/006",
        "G06N3/045",
        "G06N3/048",
        "G06N3/0481",
        "G06N3/08",
        "G06N3/084",
        "G06N3/086",
        "G06N5/01",
        "H04L63/123",
        "H04L67/133",
        "H04L9/3239",
        "H04L9/3263",
        "H04L9/50",
        "G06N3/044"
    ],
    "abstract": "A method includes obtaining identifiers of entities and symbolic artificial intelligence (AI) models configured to produce outputs responsive to inputs based on events caused by at least one of the entities. At least some of the entities are associated with outputs of respective symbolic AI models and have respective scores corresponding to the respective outputs of the symbolic AI models. The method may include obtaining scenarios, where each scenario includes simulated inputs corresponding to one or more simulated events, and at least some scenarios include a plurality of simulated inputs. The method may also include determining a population of scores of a given entity among the entities, where respective members of the population of scores correspond to respective outputs of the plurality of symbolic AI models, and where the respective outputs correspond to respective scenarios among the scenarios and storing the population of scores in memory.",
    "claims": "\n1. A tangible, non-transitory, machine-readable medium storing instructions that when executed by one or more processors effectuate operations comprising:\nreceiving, with a computer system, a request indicating an event and a host of a self-executing protocol comprising conditions associated with a set of vertices encoded as a serialized array stored in a serialized format in persistent storage;\nselecting, with the computer system, the self-executing protocol among a plurality of protocols in response to the event satisfying a set of conditions of the conditions;\ndeserializing, with the computer system, the serialized array to generate a graph encoding the conditions and the vertices in non-persistent memory;\ndetermining, with the computer system, a set of triggered vertices of the vertices, wherein each vertex of the set of triggered vertices is indicated as triggerable and is associated with a condition of the set of conditions;\nupdating the graph by, for each respective vertex of the set of triggered vertices:\nupdating a first value to indicate that the respective vertex is no longer triggerable based on the event;\nupdating a respective adjacent vertex associated with the respective vertex via a respective graph edge of graph edges connecting the vertices to indicate that the respective adjacent vertex is triggerable;\nserializing, with the computer system, the graph after updating the graph in the non-persistent memory to determine an updated serialized array; and\npersisting, with the computer system, the updated serialized array to the persistent storage.\n2. The medium of claim 1, wherein the graph in the non-persistent memory does not include the first vertex of the serialized array.\n3. The medium of claim 1, wherein the serialized array comprises an array of subarrays, wherein each subarray comprises a head vertex of a graph edge of the graph edges, a tail vertex of the graph edge, a label associated with the graph edge, and a valence value indicating a number of other edges associated with the graph edge.\n4. The medium of claim 1, wherein receiving the request comprises receiving an event message indicating the event from a publisher, and wherein the publisher is identified by a publisher identifier, the operations further comprising:\ndetermining whether the publisher is associated with one of a set of authorized publishers based on the publisher identifier; and\nauthorizing the event message based on a determination that the publisher identifier is associated with one of the set of authorized publishers.\n5. The medium of claim 1, wherein receiving the request comprises receiving an event message from a publisher, and wherein the event message is associated with a signature value and a publisher identifier, the operations further comprising:\nretrieving a cryptographic certificate based on the publisher identifier;\ncomputing a cryptographic hash value based on the signature value; and\nauthenticating the event message based on the cryptographic hash value and the cryptographic certificate.\n6. The medium of claim 1, wherein determining the set of triggered vertices comprises:\ndetermining a first set of vertices in the graph in the non-persistent memory, wherein each vertex of the first set of vertices is indicated as a head vertex by one of the graph edges;\ndetermining a set of triggerable vertices based on the first set of vertices by filtering out a set of tail vertices from the first set of vertices, wherein each of the set of tail vertices is indicated as a tail vertex by one of the graph edges; and\nselecting the set of triggered vertices based on the set of triggerable vertices.\n7. The medium of claim 1, wherein:\nthe serialized array is stored in a tamper-evident data store being executed by a set of peer nodes;\nthe tamper-evident data store comprises a directed acyclic graph of cryptographic hash pointers;\ndeserializing the serialized array comprises using a first node of the set of peer nodes to deserialize the serialized array;\nthe operations further comprising transmitting the updated serialized array from the first node to a second node of the set of peer nodes after serializing the graph without transmitting the graph in the non-persistent memory from the first node to the second node.\n8. The medium of claim 1, wherein the request comprises a method identifier, and wherein the method identifier indicates that the request comprises values to modify data stored by the computer system.\n9. The medium of claim 1, wherein the request comprises an event message that comprises a routing key, and wherein a data broker stores the event message in a queue, and wherein a protocol broker transmits the event message to an API associated with the self-executing protocol based on the routing key.\n10. The medium of claim 1, wherein determining the set of triggered vertices comprises determining the set of triggered vertices based on a set of values, wherein each value of the set of values indicates that one the set of triggerable vertices in the non-persistent memory is triggerable.\n11. The medium of claim 1, the operations further comprising:\ndetermining that a condition expiration threshold has been satisfied, wherein the condition expiration threshold is associated with a first condition of a first triggerable vertex, and wherein the event does not satisfy the first condition; and\nin response to a determination that the condition expiration threshold is satisfied, update a status of the first triggerable vertex to indicate that the first triggerable vertex is no longer triggerable.\n12. The medium of claim 1, further comprises updating an array of previously-triggered vertices based on a vertex identifier associated with each respective vertex of the set of triggered vertices.\n13. The medium of claim 1, the operations further comprising generating an initial graph based on an initial set of vertices, wherein the initial set of vertices is different from the serialized array.\n14. The medium of claim 1, wherein a vertex of the set of triggered vertices stored in the non-persistent memory comprises a condition of the set of conditions.\n15. The medium of claim 1, further comprising updating a set of values stored in the serialized format, wherein the set of values is associated with the serialized array, and wherein the set of values is updated to indicate each respective vertex of the set of triggered vertices is not triggerable.\n16. The medium of claim 1, wherein updating the respective adjacent vertex comprises setting a plurality of statuses associated with a plurality of vertices as not triggerable, wherein the plurality of vertices does not comprise the set of triggered vertices.\n17. The medium of claim 1, the operations further comprising updating a value of a second triggered vertex to indicate that the second triggered vertex remains triggerable after serializing the graph.\n18. The medium of claim 17, wherein updating the respective adjacent vertex comprises decreasing a second value, wherein the second value indicates a state of the self-executing protocol.\n19. The medium of claim 1, further comprising updating a set of previous events based on the event, wherein the set of previous events comprises a plurality of previous events that caused a state change in the self-executing protocol, wherein the set of previous events comprises a time during which the event occurred.\n20. A method comprising:\nreceiving, with a computer system, a request indicating an event and a host of a self-executing protocol comprising conditions associated with a set of vertices encoded as a serialized array stored in a serialized format in persistent storage;\nselecting, with the computer system, the self-executing protocol among a plurality of protocols in response to the event satisfying a set of conditions of the conditions;\ndeserializing, with the computer system, the serialized array to generate a graph encoding the conditions and the vertices in non-persistent memory;\ndetermining, with the computer system, a set of triggered vertices of the vertices, wherein each vertex of the set of triggered vertices is indicated as triggerable and is associated with a condition of the set of conditions;\nupdating the graph by, for each respective vertex of the set of triggered vertices:\nupdating a first value to indicate that the respective vertex is no longer triggerable based on the event;\nupdating a respective adjacent vertex associated with the respective vertex via a respective graph edge of graph edges connecting the vertices to indicate that the respective adjacent vertex is triggerable;\nserializing, with the computer system, the graph after updating the graph in the non-persistent memory to determine an updated serialized array; and\npersisting, with the computer system, the updated serialized array to the persistent storage.\n21. The method of claim 20, wherein the serialized array comprises an array of subarrays, wherein each subarray comprises a head vertex of a graph edge of the graph edges, a tail vertex of the graph edge, a label associated with the graph edge, and a valence value indicating a number of other edges associated with the graph edge.\n22. The method of claim 20, wherein determining the set of triggered vertices comprises:\ndetermining a first set of vertices in the graph in the non-persistent memory, wherein each vertex of the first set of vertices is indicated as a head vertex by one of the graph edges;\ndetermining a set of triggerable vertices based on the first set of vertices by filtering out a set of tail vertices from the first set of vertices, wherein each of the set of tail vertices is indicated as a tail vertex by one of the graph edges; and\nselecting the set of triggered vertices based on the set of triggerable vertices.\n23. The method of claim 20, wherein:\nthe serialized array is stored in a tamper-evident data store being executed by a set of peer nodes;\nthe tamper-evident data store comprises a directed acyclic graph of cryptographic hash pointers;\ndeserializing the serialized array comprises using a first node of the set of peer nodes to deserialize the serialized array;\nthe method further comprising transmitting the updated serialized array from the first node to a second node of the set of peer nodes after serializing the graph without transmitting the graph in the non-persistent memory from the first node to the second node.\n24. The method of claim 20, further comprising:\ndetermining that a condition expiration threshold has been satisfied, wherein the condition expiration threshold is associated with a first condition of a first triggerable vertex, and wherein the event does not satisfy the first condition; and\nin response to a determination that the condition expiration threshold is satisfied, update a status of the first triggerable vertex to indicate that the first triggerable vertex is no longer triggerable.\n25. The method of claim 20, wherein receiving the request comprises receiving an event message indicating the event from a publisher, and wherein the publisher is identified by a publisher identifier, the method further comprising:\ndetermining whether the publisher is associated with one of a set of authorized publishers based on the publisher identifier; and\nauthorizing the event message based on a determination that the publisher identifier is associated with one of the set of authorized publishers.\n26. The method of claim 20, further comprising:\nwherein receiving the request comprises receiving an event message from a publisher, wherein the event message is associated with a signature value and a publisher identifier;\nretrieving a cryptographic certificate based on the publisher identifier;\ncomputing a cryptographic hash value based on the signature value; and\nauthenticating the event message based on the cryptographic hash value and the cryptographic certificate.\n27. The method of claim 20, wherein the request comprises a method identifier, and wherein the method identifier indicates that the request comprises values to modify data stored by the computer system.\n28. The method of claim 20, wherein the request comprises an event message that comprises a routing key, and wherein a data broker stores the event message in a queue, and wherein a protocol broker transmits the event message to an API associated with the self-executing protocol based on the routing key.\n29. The method of claim 20, wherein determining the set of triggered vertices comprises determining the set of triggered vertices based on a set of values, wherein each value of the set of values indicates that one the set of triggerable vertices in the non-persistent memory is triggerable.\n30. The method of claim 20, wherein the graph in the non-persistent memory does not include the first vertex of the serialized array."
}