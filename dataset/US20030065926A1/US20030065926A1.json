{
    "patent_link": "https://patents.google.com/patent/US20030065926A1/en",
    "patent_id": "US20030065926A1",
    "title": "System and methods for detection of new malicious executables",
    "abstract": "A system and methods for detecting malicious executable attachments at an email processing application of a computer system using data mining techniques. The email processing application may be located at the server or at the client or host. The executable attachments are filtered from said email, and byte sequence features are extracted from the executable attachment. The executable attachments are classified by comparing the byte sequence feature of the executable attachment to a classification rule set derived from byte sequence features of a data set of known executables having a predetermined class in a set of classes, e.g., malicious or benign. The system is also able to classify executable attachments as borderline when the difference between the probability that the executable is malicious and the probability that the executable is benign are within a predetermined threshold. The system can notify the user when the number of borderline attachments exceeds the threshold in order to refine the classification rule set.",
    "inventors": [
        "Matthew Schultz",
        "Eleazar Eskin",
        "Erez Zadok",
        "Manasi Bhattacharyya",
        "Stolfo Salvatore"
    ],
    "assignee": "Columbia University of New York",
    "classifications": [
        "H04L63/145",
        "G06F21/562"
    ],
    "claims": "\n1. A method for classifying an executable attachment in an email received at an email processing application of a computer system comprising:\na) at the email processing application, filtering said executable attachment from said email;\nb) extracting a byte sequence feature from said executable attachment; and\nc) classifying said executable attachment by comparing said byte sequence feature of said executable attachment with a classification rule set derived from byte sequence features of a set of executables having a predetermined class in a set of classes.\n2. The method as defined in claim 1, wherein the step of extracting said byte sequence feature from said executable attachment comprises extracting static properties of said executable attachment.\n3. The method as defined in claim 1, wherein the step of extracting said byte sequence feature from said executable attachment comprises converting said executable attachment from binary format to hexadecimal format.\n4. The method as defined in claim 1, wherein the step of extracting said byte sequence features from said executable attachment comprises creating a byte string representative of resources referenced by said executable attachment.\n5. The method as defined in claim 1, wherein the step of classifying said executable attachment comprises determining a probability that said executable attachment is a member of each class in a set of classes consisting of malicious and benign.\n6. The method as defined in claim 1, wherein the step of classifying said executable attachment comprises determining a probability that said executable attachment is a member of each class in a set of classes consisting of malicious, benign, and borderline.\n7. The method as defined in claim 1, wherein the step of classifying said executable attachment comprises determining a probability that said executable attachment is a member of each class in said set of classes based on said byte sequence feature.\n8. The method as defined in claim 7, wherein the step of classifying said executable attachment comprises determining said probability that said executable attachment is a member of each class in said set of classes with a Naive Bayes algorithm.\n9. The method as defined in claim 7, wherein the step of classifying the executable attachment comprises determining said probability that said executable attachment is a member of a class in said set of classes with a Multi-Naive Bayes algorithm.\n10. The method as defined in claim 9, which further comprises dividing said step of determining said probability into a plurality of processing steps and executing said processing steps in parallel.\n11. The method as defined in claim 7, wherein the step of classifying the executable attachment comprises classifying said executable attachment as malicious if said probability that said executable attachment is malicious is greater than said probability that said executable attachment is benign.\n12. The method as defined in claim 7, wherein the step of classifying the executable attachment comprises classifying said executable attachment as benign if said probability that said executable attachment is benign is greater than said probability that said executable attachment is malicious.\n13. The method as defined in claim 7, wherein the step of classifying the executable attachment comprises classifying said executable attachment as borderline if a difference between said probability that said executable attachment is benign and said probability that said executable attachment is malicious is within a predetermined threshold.\n14. The method as defined in claim 1, which further comprises logging said class of said executable attachment classified in said step c).\n15. The method as defined in claim 14, wherein said step of logging said class of said executable attachment further comprising incrementing a count of said executable attachments classified as borderline.\n16. The method defined in claim 15, which further comprises, if said count of executable attachments exceeds a predetermined threshold, providing a notification that said threshold has been exceeded.\n17. A method for classifying an executable program comprising:\na) training a classification rule set based on a predetermined set of known executable programs having a predetermined class and one or more byte sequence features by recording the number of known executable programs in each said predetermined class that has each of said byte sequence features;\nb) extracting a byte sequence feature from said executable program comprising converting said executable program from binary format to hexadecimal format;\nc) determining the probability that the executable program is within each said predetermined class, based on said one or more byte sequence features in said executable and said classification rule set.\n18. The method as defined in claim 17, wherein the step of extracting said byte sequence feature from said executable program comprises extracting static properties of said executable program.\n19. The method as defined in claim 17, wherein the step of determining the probability that the executable program is within each said predetermined class comprises determining the probability that the executable program is within said predetermined class in a set of classes consisting of malicious and benign.\n20. The method as defined in claim 17, wherein the step of determining the probability that the executable program is within each said predetermined class comprises step determining the probability that the executable program is within said predetermined class in a set of classes consisting of malicious, benign, and borderline.\n21. The method as defined in claim 17, wherein the step of determining said probability that the executable program is within each said predetermined class comprises determining said probability that the executable program is within each said predetermined class with a Naive Bayes algorithm.\n22. The method as defined in claim 17, wherein the step of determining said probability that the executable program is within each said predetermined class comprises determining said probability that the executable program is within each said predetermined class with a multi-Naive Bayes algorithm.\n23. The method as defined in claim 17, wherein the step of determining said probability that the executable program is within each said predetermined class comprises classifying said executable program as malicious if said probability that said executable program is malicious is greater than said probability that said executable program is benign.\n24. The method as defined in claim 17, wherein the step of determining said probability that the executable program is within each said predetermined class comprises classifying said executable program as benign if said probability that said executable program is benign is greater than said probability that said executable program is malicious.\n25. The method as defined in claim 17, wherein the step of determining said probability that the executable program is within each said predetermined class comprises classifying said executable program as borderline if a difference between said probability that said executable program is benign and said probability that said executable program is malicious is within a predetermined threshold.\n26. The method as defined in claim 17, which further comprises logging said class of said executable determined in said step c).\n27. The method as defined in claim 26, wherein said step of logging said class of said executable further comprising incrementing a count of said executable classified as borderline.\n28. The method defined in claim 27, which further comprises, if said count of executable exceeds a predetermined threshold, providing a notification that said threshold has been exceeded.\n29. A system for classifying an executable attachment in an email received at a server of a computer system comprising:\na) an email filter configured to filter said executable attachment from said email;\nb) a feature extractor configured to extract a byte sequence feature from said executable attachment; and\nc) a rule evaluator configured to classify said executable attachment by comparing said byte sequence feature of said executable attachment to a classification rule set derived from byte sequence features of a set of executables having a predetermined class in a set of classes.\n30. The system as defined in claim 29, wherein the feature extractor is configured to extract static properties of said executable attachment.\n31. The system as defined in claim 29, wherein the feature extractor is configured to convert said executable attachment from binary format to hexadecimal format.\n32. The system as defined in claim 29, wherein the feature extractor is configured to create a byte string representative of resources referenced by said executable attachment.\n33. The system as defined in claim 29, wherein the rule evaluator is configured to predict the classification of said executable attachment as one class of a set of classes consisting of malicious and benign.\n34. The system as defined in claim 29, wherein the rule evaluator is configured to predict the classification of said executable attachment as one class of a set of classes consisting of malicious, benign, and borderline.\n35. The system as defined in claim 29, wherein the rule evaluator is configured to determine a probability that said executable attachment is a member of a class of said set of classes based on said byte sequence feature.\n36. The system as defined in claim 35, wherein the rule evaluator is configured to determine said probability that said executable attachment is a member of one class of said set of classes with a Naive Bayes algorithm.\n37. The system as defined in claim 35, wherein the rule evaluator is configured to determine said probability that said executable attachment is a member of a class of said set of classes with a multi-Naive Bayes algorithm.\n38. The system as defined in claim 35, wherein the rule evaluator is configured to divide a determination said probability into a plurality of processing steps and to execute said processing steps in parallel.\n39. The system as defined in claim 35, wherein the rule evaluator is configured to classify said executable attachment as malicious if said probability that said executable attachment is malicious is greater than said probability that said executable attachment is benign.\n40. The system as defined in claim 35, wherein the rule evaluator is configured to classify said executable attachment as benign if said probability that said executable attachment is benign is greater than said probability that said executable attachment is malicious.\n41. The system as defined in claim 35, wherein the rule evaluator is configured to classify said executable attachment as borderline if a difference between said probability that said executable attachment is benign and said probability that said executable attachment is malicious is within a predetermined threshold.\n42. The system as defined in claim 29, which further comprises an email interface configured to log said class of said executable attachment classified in said step c).\n43. The system as defined in claim 42, wherein said email interface is configured to increment a count of said executable attachments classified as borderline.\n44. The system defined in claim 43, wherein said email interface is configured to, if said count of executable attachments exceeds a predetermined threshold, provide a notification that said threshold has been exceeded.",
    "status": "Active",
    "citations_own": [
        "US5485575A",
        "US5765170A",
        "US5832208A",
        "US6016546A",
        "US6161130A",
        "US6275850B1",
        "US20020059383A1",
        "US20020065892A1",
        "US6598076B1",
        "US6778995B1",
        "US6820081B1",
        "US6826609B1",
        "US6888548B1",
        "US6978274B1",
        "US7080076B1"
    ],
    "citations_ftf": [
        "JP2501771B2",
        "US5675711A",
        "US6732149B1",
        "US20040073617A1"
    ],
    "citedby_own": [
        "US20030050933A1",
        "US20030088680A1",
        "US20030093514A1",
        "US20030115486A1",
        "US20030208546A1",
        "US20030212913A1",
        "US20030233418A1",
        "US20040015712A1",
        "US20040068695A1",
        "US20040068663A1",
        "US20040068664A1",
        "US20040083381A1",
        "US20040083408A1",
        "US20040103310A1",
        "US20040103367A1",
        "US20040117648A1",
        "US20040153666A1",
        "US20040158725A1",
        "US20040158546A1",
        "US20040158732A1",
        "US20040187010A1",
        "US20040205411A1",
        "US20040236758A1",
        "WO2005008417A2",
        "US20050055410A1",
        "US20050091512A1",
        "US20050125667A1",
        "US20050132227A1",
        "US20050135266A1",
        "US20050138430A1",
        "US20050149479A1",
        "US20050172115A1",
        "US20050188272A1",
        "US20050193130A1",
        "US20050198171A1",
        "US20050223238A1",
        "US20050240769A1",
        "US20050278178A1",
        "US20050283519A1",
        "US20060026686A1",
        "US20060026675A1",
        "US20060026283A1",
        "US20060041837A1",
        "US20060075494A1",
        "US20060075468A1",
        "US20060090205A1",
        "DE102004054742A1",
        "US20060143712A1",
        "US20060174345A1",
        "US7089591B1",
        "US20060212520A1",
        "US20060242244A1",
        "US7130981B1",
        "US20060259948A1",
        "US20060265498A1",
        "US7155742B1",
        "US20070016951A1",
        "US20070067843A1",
        "US7203959B2",
        "US20070088793A1",
        "US20070169197A1",
        "US20070168982A1",
        "EP1814055A2",
        "US7296293B2",
        "EP1879124A1",
        "US20080021899A1",
        "US20080028463A1",
        "US7337327B1",
        "US7367056B1",
        "US7370233B1",
        "US7380277B2",
        "US20080127336A1",
        "US20080134333A1",
        "US20080154813A1",
        "US20080168149A1",
        "US20080184371A1",
        "EP1952246A2",
        "US7415727B1",
        "US20080209557A1",
        "US7426510B1",
        "US20080235773A1",
        "US7441042B1",
        "US20080282349A1",
        "US20090013405A1",
        "US7478431B1",
        "US20090019545A1",
        "US7509680B1",
        "US20090083855A1",
        "US20090094669A1",
        "WO2006039351A3",
        "US20090133126A1",
        "US20090158434A1",
        "US20090182830A1",
        "EP2110771A2",
        "US20090300764A1",
        "US7631353B2",
        "US20100037314A1",
        "US7690034B1",
        "US7739278B1",
        "GB2466120A",
        "US7765593B1",
        "US20100199349A1",
        "US20100229239A1",
        "US20100281540A1",
        "US7861304B1",
        "US7895651B2",
        "US7895448B1",
        "US7895654B1",
        "US20110067108A1",
        "US20110093426A1",
        "US20110126286A1",
        "US20110154495A1",
        "US7975303B1",
        "US20110167495A1",
        "US20110179491A1",
        "WO2011156754A1",
        "US8104086B1",
        "US20120023566A1",
        "US8161548B1",
        "US20120151586A1",
        "EP2469445A1",
        "US20120198552A1",
        "US8271774B1",
        "US8272058B2",
        "US20120278890A1",
        "US8544087B1",
        "US8549647B1",
        "CN103425798A",
        "US8621625B1",
        "US8631489B2",
        "US8655724B2",
        "US20140053266A1",
        "US20140090061A1",
        "US8756693B2",
        "US8763076B1",
        "US8826438B2",
        "US8893278B1",
        "US8931094B2",
        "CN104331664A",
        "US8984636B2",
        "US9098333B1",
        "US9129110B1",
        "US9135439B2",
        "US9143518B2",
        "CN104933059A",
        "US9166994B2",
        "CN105229661A",
        "US9306966B2",
        "US20160173516A1",
        "US20160246800A1",
        "US9450979B2",
        "US9483742B1",
        "US20160330224A1",
        "US9495541B2",
        "US9516058B2",
        "US20170093899A1",
        "US9680861B2",
        "US9754102B2",
        "US9798981B2",
        "US9832216B2",
        "US9894088B2",
        "US9930065B2",
        "US10015190B2",
        "US10050986B2",
        "US10084806B2",
        "US10178113B2",
        "US10250617B1",
        "US10498760B1",
        "US10546125B1",
        "US10547674B2",
        "US20200042704A1",
        "CN111382439A",
        "US20200364338A1",
        "US10846403B2",
        "CN112989349A",
        "US20210194900A1",
        "US11070572B2",
        "US20210256127A1",
        "US11165790B2",
        "US11349852B2",
        "US11489857B2",
        "CN115563614A",
        "US11601451B1"
    ],
    "citedby_ftf": [
        "US7389413B2",
        "US7913078B1",
        "US6901519B1",
        "US7225343B1",
        "JP2005141601A",
        "US8037535B2",
        "US7562293B2",
        "GB2427048A",
        "US20070240222A1",
        "US7870612B2",
        "US9729513B2",
        "GB2444514A",
        "US20080229416A1",
        "US8037536B2",
        "US9306796B1",
        "US8301904B1",
        "US20100058467A1",
        "US8627461B2",
        "US8291497B1",
        "US8719939B2",
        "US9202049B1",
        "US9239907B1",
        "US8756695B1",
        "US9218461B2",
        "US9100425B2",
        "US8799190B2",
        "US8726338B2",
        "US9027141B2",
        "KR101265173B1",
        "CN103425928B",
        "CN103106367A",
        "US9552544B1",
        "US10255548B1",
        "US10133983B1",
        "GB2518880A",
        "RU2587429C2",
        "CN103984703B",
        "US10291628B2",
        "US9330264B1",
        "US9665716B2",
        "US10621613B2",
        "US10681080B1",
        "CN104933364B",
        "CN104933365B",
        "US10462159B2",
        "US10652270B1",
        "US10644878B2",
        "US10404734B2",
        "CN107665164A",
        "JP7073348B2",
        "US10758188B2",
        "JP6866645B2",
        "JP2018109910A",
        "US10389753B2",
        "US11757857B2",
        "CN107180192B",
        "US10585853B2",
        "RU2654151C1",
        "US11709946B2",
        "US11528287B2",
        "USD926809S1",
        "USD926810S1",
        "USD926811S1",
        "USD926782S1",
        "USD926200S1",
        "US20210133330A1"
    ]
}