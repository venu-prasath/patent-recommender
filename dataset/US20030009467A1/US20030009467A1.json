{
    "patent_link": "https://patents.google.com/patent/US20030009467A1/en",
    "patent_id": "US20030009467A1",
    "title": "System and method for organizing, compressing and structuring data for data mining readiness",
    "abstract": "A system and method to take data, which is in the form of an n-dimensional array of binary data where the binary data is comprised of bits that are identified by a bit position within the n-dimensional array, and create one file for each bit position of the binary data while maintaining the bit position identification and to store the bit with the corresponding bit position identification from the binary data within the created filed. Once this bit-sequential format of the data is achieved, the formatted data is structured into a tree format that is data-mining-ready. The formatted data is structured by dividing each of the files containing the binary data into quadrants according to the bit position identification and recording the count of 1-bits for each quadrant on a first level. Then, recursively dividing each of the quadrants into further quadrants and recording the count of 1-bits for each quadrant until all quadrants comprise a pure-1 quadrant or a pure-0 quadrant to form a basic tree structure.",
    "inventors": [
        "William Perrizo"
    ],
    "assignee": "North Dakota State University Research Foundation",
    "classifications": [
        "G06F16/9027",
        "Y10S707/99935",
        "Y10S707/99936",
        "Y10S707/99942"
    ],
    "claims": "\n1. A method of structuring data in a data-mining-ready format, wherein said data has been previously organized in a bit-Sequential (bSQ) format that comprises a plurality of binary files identified by a bit position, said method comprising the steps of:\ndividing each of said plurality of binary files into first quadrants;\nrecording the count of 1-bits for each first quadrant on a first level;\ndividing each of said first quadrants into new quadrants;\nrecording the count of 1-bits for each of said new quadrants on a new level; and\nrepeating the two steps immediately above until all of said new quadrants comprise a pure-1 quadrant or a pure-0 quadrant to form a basic tree structure.\n2. The method of claim 1, wherein said basic tree structure has a complement that provides the 0-bit counts for each of said first quadrants and said new quadrants.\n3. The method of claim 1, further comprising the step of masking said basic tree structure.\n4. The method of claim 3, wherein said step of masking comprises using a 3-value logic to represent said pure-1 quadrants, said pure-0 quadrants, and a non-pure quadrant.\n5. The method of claim 1, further comprising constructing a value tree structure from said basic tree structure.\n6. The method of claim 5, further comprising constructing a tuple tree structure from said value tree structure.\n7. The method of claim 1, wherein said data comprises two-dimensional spatial data.\n8. The method of claim 7, wherein said basic tree structure comprises a lossless format of said two-dimensional spatial data.\n9. The method of claim 1, wherein said data comprises bioinformatics data.\n10. The method of claim 9, wherein said bioinformatics data comprises microarray data.\n11. The method of claim 1, wherein said data comprises nanotechnology data.\n12. The method of claim 1, wherein said data comprises data representing an integrated circuit.\n13. A system for structuring data in a data-mining-ready format, wherein said data has been previously organized in a bit-Sequential (bSQ) format that comprises a plurality of binary files identified by a bit position, said system comprising:\na computer system and a set of computer readable instructions, wherein said set of instructions include directing said computer to system to:\ndivide each of said plurality of binary files into first quadrants;\nrecord the count of 1-bits for each first quadrant on a first level;\ndivide each of said first quadrants into new quadrants;\nrecord the count of 1-bits for each of said new quadrants on a new level; and\nrepeat recursively until all of said new quadrants comprise a pure-1 or pure-0 quadrant to form a basic tree structure.\n14. The system of claim 13, wherein said set of instructions further include directing said computer system to determine a complement of said basic tree structure that provides the 0-bit counts for each of said first quadrants and said new quadrants.\n15. The system of claim 13, wherein said set of instructions further include directing said computer system to mask said basic tree structure.\n16. The system of claim 15, wherein the masking of said basic tree structure comprises using a 3-value logic to represent said pure-1 quadrants, said pure-0 quadrants, and a non-pure quadrant.\n17. The system of claim 13, wherein said set of instructions further include directing said computer system to construct a value tree structure from said basic tree structure.\n18. The system of claim 17, wherein said set of instructions further include directing said computer system to construct a tuple tree structure from said basic tree structure.\n19. The system of claim 13, wherein said data comprises two-dimensional spatial data.\n20. The system of claim 19, wherein said basic tree structure comprises a lossless format of said two-dimensional spatial data.\n21. The system of claim 19, wherein said data comprises bioinformatics data.\n22. The system of claim 21, wherein said data comprises microarray data.\n23. The system of claim 13, wherein said data comprises nanotechnology data.\n24. The system of claim 23, wherein said data comprises data representing an integrated circuit.\n25. A system for formatting data, wherein said data is in the form of an n-dimensional array of binary data, said binary data comprising a plurality of bits that are identified by a bit position within the n-dimensional array, the system comprising:\na computer system and a set of computer readable instructions, wherein said set of instructions include directing said computer to system to:\ncreate one file for each bit position of said binary data wherein the bit position identification is maintained; and\nstore the bit with the corresponding bit position identification from said binary data within the created file.\n26. The system of claim 25, wherein said data comprises two-dimensional spatial data.\n27. The system of claim 25, wherein said data comprises bioinformatics data.\n28. The system of claim 27, wherein said bioinformatics data comprises microarray data.\n29. The system of claim 25, wherein said data comprises nanotechnology data.\n30. The system of claim 25, wherein said data comprises data representing an integrated circuit.\n31. A method of formatting data, wherein said data is in the form of an n-dimensional array of binary data, said binary data comprising a plurality of bits that are identified by a bit position within the n-dimensional array, said method comprising the steps of\ncreating one file for each bit position of said binary data while maintaining the bit position identification; and\nstoring the bit with the corresponding bit position identification from said binary data within the created file.\n32. The method of claim 31, wherein said data comprises two-dimensional spatial data.\n33. The method of claim 31, wherein said data comprises bioinformatics data.\n34. The method of claim 33, wherein said bioinformatics data comprises microarray data.\n35. The method of claim 31, wherein said data comprises nanotechnology data.\n36. The method of claim 1, wherein said data comprises data representing an integrated circuit.",
    "status": "Expired - Lifetime",
    "citations_own": [
        "US5715455A",
        "US5960437A",
        "US5987468A",
        "US6185561B1"
    ],
    "citations_ftf": [],
    "citedby_own": [
        "US20020198877A1",
        "US20030005053A1",
        "US20030004995A1",
        "US20030004996A1",
        "US20030028571A1",
        "US20030083924A1",
        "US20030176931A1",
        "US20030175720A1",
        "US20040210562A1",
        "US20040254768A1",
        "US20050097093A1",
        "US20050222972A1",
        "US7003566B2",
        "US20060224549A1",
        "US7194477B1",
        "US20070198573A1",
        "US20080021909A1",
        "US20080033784A1",
        "US20080033808A1",
        "US20080033809A1",
        "US20080086451A1",
        "US20080126146A1",
        "US20080140617A1",
        "US20100131506A1",
        "US20120185677A1",
        "US8676646B2",
        "US8676647B2",
        "US9235458B2",
        "US20160335425A1",
        "US20180302297A1",
        "US20190043855A1",
        "WO2019083496A1",
        "US20210056442A1",
        "CN114839601A"
    ],
    "citedby_ftf": [
        "US7958096B2",
        "US7337230B2",
        "US7139764B2",
        "US8655911B2",
        "US7426520B2",
        "US7565369B2",
        "JP3871684B2",
        "US7379939B2",
        "US7203882B2",
        "US7415473B2",
        "WO2006055894A2",
        "WO2007124616A1",
        "US8838648B2",
        "US7836004B2",
        "US20080281530A1",
        "US8204866B2",
        "US8171001B2",
        "US8166000B2",
        "US8401987B2",
        "US7652620B2",
        "US7646332B2",
        "US7953685B2",
        "US7616151B1",
        "US7602332B1",
        "US9720971B2",
        "US7592947B1",
        "US7880671B2",
        "US7750842B2",
        "US8390508B1",
        "US8819065B2",
        "US9720927B2",
        "US8930303B2"
    ]
}