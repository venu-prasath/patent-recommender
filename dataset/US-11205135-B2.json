{
    "patent_id": "US-11205135-B2",
    "title": "Quanton representation for emulating quantum-like computation on classical processors ",
    "assignee": "Kyndi, Inc.",
    "publication_date": "2021-12-21",
    "patent_link": "https://patents.google.com/patent/US11205135B2/en",
    "inventors": [
        "Arun Majumdar"
    ],
    "classifications": [
        "G06N10/60",
        "G06N10/00",
        "G06F9/45504",
        "G06N10/20",
        "G06N3/126",
        "B82Y10/00",
        "G06N7/005",
        "G06N7/01",
        "G06N99/00"
    ],
    "abstract": "The Quanton virtual machine approximates solutions to NP-Hard problems in factorial spaces in polynomial time. The data representation and methods emulate quantum computing on classical hardware but also implement quantum computing if run on quantum hardware. The Quanton uses permutations indexed by Lehmer codes and permutation-operators to represent quantum gates and operations. A generating function embeds the indexes into a geometric object for efficient compressed representation. A nonlinear directional probability distribution is embedded to the manifold and at the tangent space to each index point is also a linear probability distribution. Simple vector operations on the distributions correspond to quantum gate operations. The Quanton provides features of quantum computing: superpositioning, quantization and entanglement surrogates. Populations of Quantons are evolved as local evolving gate operations solving problems or as solution candidates in an Estimation of Distribution algorithm. The Quanton representation and methods are fully parallel on any hardware.",
    "claims": "\n1. A method of emulating an evolution of a quantum an evolution of system, the method being performed by circuitry, the method comprising:\nstoring in memory a virtual machine data structure (VMDS) by configuring in the memory a permutation data structure representing a quantum state, configuring in the memory a second data structure representing an evolution operator of the quantum state as directional displacements on a manifold, and configuring in the memory a relational table relating permutations to lattice points on the manifold;\nreceiving training data representing a plurality of input quantum states respectively associated with a plurality of output quantum states of the plurality of input quantum states after having evolved according to the quantum system;\ntraining, using the received training data, the VMDS by initializing a distribution of the VMDS, and iteratively updating the distribution of the VMDS to generate a trained VMDS representing a convergence of the distribution of the VMDS; and\nemulating the quantum system by applying the trained VMDS to a quantum input representing an initial state of the quantum system and thereby generating, in polynomial time, a quantum output representing an initial state of the quantum system and corresponding to the quantum input evolved according to the quantum system.\n2. The method according to claim 1, wherein the wherein the distribution of the VDS is iteratively updated based on results of a fitness function applied to randomly selected VMDSs to generate the trained VMDS.\n3. The method according to claim 2, wherein the permutation data structure is an array representing a permutation matrix, and each of the randomly selected VMDSs are determined using respective random numbers generated by the circuitry according to the distribution of the VMDS.\n4. The method according to claim 3, further comprising:\ndefining a mapping of quantum states to permutations; and\nconfiguring the VMDS in the memory by:\nconfiguring the relational table in the memory to relate the permutations to the lattice points that are a countable number of lattice points on the manifold, the lattice points forming vertices of a Birkhoff polytope; and\nconfiguring the second data structure in the memory as a first probability density, which is a directional probability density on the manifold, and a second probability density representing a distribution of quantum states, which is a linear probability density in a tangent space, the tangent space being one of a plurality of tangent spaces tangent to the manifold at the lattice points and forming a tessellation the manifold;\nwherein training the VMDS by iteratively updating the distribution of the VMDS further includes:\nrepeating in an iteratively loop until stopping criteria are reached;\ndetermining, as the randomly selected VMDSs, samples of VMDSs randomly selected from the distribution of the VMDS using the random numbers generated by the circuitry;\nobtaining the results of the fitness function applied to the randomly selected VMDSs by calculating respective fitness values of the samples of VMDSs by applying a fitness function to each respective sample of the samples of VMDSs;\nselecting a fit subset of the samples of VMDSs corresponding to fitness values within a range; and\nupdating the distribution of the VMDS according to statistical properties of the fit subset of the samples of the VMDSs,\nwherein the trained VMDS is a VMDS of the samples of the VMDSs that has a greatest fitness value relative to all other of the samples of the VMDSs when the stopping criteria are reached.\n5. The method according to claim 4, wherein the VMDS is a Quanton virtual machine data structure (QVM), and wherein the method further comprises configuring the QVM in the memory by:\narranging the manifold including that the lattice points as a lattice forming a polytope, wherein each lattice point corresponds to a respective vertex of the polytope, and the lattice points are indexed by respective numbers of a numerical sequence, the respective numbers being associated with the respective permutations.\n6. The method according to claim 4, wherein the manifold is a finite geometric surface, wherein the manifold represents nonlinear characteristics of the-evolution of the quantum system, and\nwherein the tangent spaces is a tessellation of the manifold, wherein the tangent spaces represent a local linear approximation of the manifold.\n7. The method according to claim 4, further comprising\ndefining a transition model, which evolves the second probability density according to transitions represented by the first probability density, wherein the first probability density represents transitions along the manifold among the lattice points, and\nmapping the second probability to/from a Euclidean space of the tangent space from/to a space of manifold, using a logarithmic map.\n8. The method according to claim 4, wherein receiving the training data further includes mapping the training data to the manifold and tangent spaces to represent input data and output data as permutations corresponding to the lattice points, and\nwherein the stopping criteria include a measure of how closely permutation transitions are represented by the first probability density approximate translations from the permutations of the input data to the permutations of the output data.\n9. The method according to claim 4, further comprising:\ndefining operational semantics, wherein respective states of the quantum system correspond to respective permutations of the lattice points and respective gate operations on the states of the quantum system correspond to transitions among the lattice points and/or permutation operations on the permutations of the lattice points.\n10. The method according to claim 4, wherein the permutations are represented as permutrices, each permutrix including a respective permutant and a respective permuton, wherein the respective permutants represent observable states and the respective permutons represent hidden states or imaginary states.\n11. The method according to claim 4, wherein the manifold is a hypersphere, the countable number of lattice points being a Landau number greater than a dimension of a state space of the quantum system, and\nwherein the lattice points are arranged in one of a Fibonacci lattice and a Fermat lattice, and the lattice points are labeled by the respective permutations, which, when the lattice points are arranged in the Fibonacci lattice, are represented by Lehmer codes determined using a Binet Formula.\n12. An apparatus comprising:\ncircuitry; and\na memory for storing instructions executable by the circuitry and for storing a virtual machine data structure (VMDS),\nwherein the circuitry is configured to:\nstore in memory a virtual machine data structure (VMDS) by configuring in the memory a permutation data structure representing a quantum state, configuring in the memory a second data structure representing an evolution operator of the quantum state as directional displacements on a manifold, and configuring in the memory a relational table relating permutations to lattice points on the manifold;\nreceive training data representing a plurality of input quantum states respectively associated with a plurality of output quantum states of the plurality of input quantum states after having evolved according to the quantum system;\ntrain, using the received training data, the VMDS by initializing a distribution of the VMDS, and iteratively updating the distribution of the VMDS to generate a trained VMDS representing a convergence of the distribution of the VMDS; and\nemulate the quantum system by applying the trained VMDS to a quantum input representing an initial state of the quantum system and thereby generating, in polynomial time, a quantum output representing an initial state of the quantum system and corresponding to the quantum input evolved according to the quantum system.\n13. The apparatus according to claim 12, wherein the distribution of the VDS is iteratively updated based on results of a fitness function applied to randomly selected VMDSs to generate the trained VMDS.\n14. The apparatus according to claim 13, wherein the permutation data structure is an array representing a permutation matrix, and each of the randomly selected VMDSs are determined using respective random numbers generated by the circuitry according to the distribution of the VMDS.\n15. The apparatus according to claim 14, wherein the circuitry is further configured to:\ndefine a mapping of quantum states to permutations; and\nconfigure the VMDS in the memory by:\nconfiguring the relational table in the memory to relate the permutations to the lattice points that are a countable number of lattice points on the manifold, the lattice points forming vertices of a Birkhoff polytope; and\nconfiguring the second data structure in the memory as a first probability density, which is a directional probability density on the manifold, and a second probability density representing a distribution of quantum states, which is a linear probability density in a tangent space, the tangent space being one of a plurality of tangent spaces tangent to the manifold at the lattice points and forming a tessellation the manifold;\nwherein, when training the VMDS by iteratively updating the distribution of the VMDS, the circuitry is further configured to:\nrepeat in an iteratively loop until stopping criteria are reached;\ndetermine, as the randomly selected VMDSs, samples of VMDSs randomly selected from the distribution of the VMDS using the random numbers generated by the circuitry;\nobtain the results of the fitness function applied to the randomly selected VMDSs by calculating respective fitness values of the samples of VMDSs by applying a fitness function to each respective sample of the samples of VMDSs;\nselect a fit subset of the samples of VMDSs corresponding to fitness values within a range; and\nupdate the distribution of the VMDS according to statistical properties of the fit subset of the samples of the VMDSs,\nwherein the trained VMDS is a VMDS of the samples of the VMDSs that has a greatest fitness value relative to all other of the samples of the VMDSs when the stopping criteria are reached.\n16. The apparatus according to claim 15, wherein, when configuring the VMDS in the memory, the circuitry is further configured to:\narrange the manifold including that the lattice points as a lattice forming a polytope, wherein each lattice point corresponds to a respective vertex of the polytope, and the lattice points are indexed by respective numbers of a numerical sequence, the respective numbers being associated with the respective permutations.\n17. The apparatus according to claim 15, wherein the manifold is a finite geometric surface, wherein the manifold represents nonlinear characteristics of the-evolution of the quantum system, and\nwherein the tangent spaces is a tessellation of the manifold, wherein the tangent spaces represent a local linear approximation of the manifold.\n18. The apparatus according to claim 15, wherein the circuitry is further configured to:\ndefine a transition model, which evolves the second probability density according to transitions represented by the first probability density, wherein the first probability density represents transitions along the manifold among the lattice points, and\nmap the second probability to/from a Euclidean space of the tangent space from/to a space of manifold, using a logarithmic map.\n19. The apparatus according to claim 15, wherein, when receiving the training data, the circuitry is further configured to map the training data to the manifold and tangent spaces to represent input data and output data as permutations corresponding to the lattice points, and\nwherein the stopping criteria include a measure of how closely permutation transitions are represented by the first probability density approximate translations from the permutations of the input data to the permutations of the output data.\n20. A non-transitory computer-readable medium storing instructions for emulating an evolution of a quantum system that, when executed by one or more processors of a device, cause the device to:\nstore in memory a virtual machine data structure (VMDS) by configuring in the memory a permutation data structure representing a quantum state, configuring in the memory a second data structure representing an evolution operator of the quantum state as directional displacements on a manifold, and configuring in the memory a relational table relating permutations to lattice points on the manifold;\nreceive training data representing a plurality of input quantum states respectively associated with a plurality of output quantum states of the plurality of input quantum states after having evolved according to the quantum system;\ntrain, using the received training data, the VMDS by initializing a distribution of the VMDS, and iteratively updating the distribution of the VMDS to generate a trained VMDS representing a convergence of the distribution of the VMDS; and\nemulate the quantum system by applying the trained VMDS to a quantum input representing an initial state of the quantum system and thereby generating, in polynomial time, a quantum output representing an initial state of the quantum system and corresponding to the quantum input evolved according to the quantum system."
}