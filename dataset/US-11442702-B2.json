{
    "patent_id": "US-11442702-B2",
    "title": "Code completion ",
    "assignee": "Affirm, Inc.",
    "publication_date": "2022-09-13",
    "patent_link": "https://patents.google.com/patent/US11442702B2/en",
    "inventors": [
        "Adam Smith",
        "Tarak Upadhyaya",
        "Juan Lozano",
        "Daniel Hung"
    ],
    "classifications": [
        "G06F40/30",
        "G06F8/33",
        "G06F40/174",
        "G06F40/284",
        "G06F8/34",
        "G06N3/04",
        "G06N3/045",
        "G06N3/084",
        "G06N20/20",
        "G06N3/044",
        "G06N5/01",
        "G06N7/01"
    ],
    "abstract": "A system and method may provide assistance to programmers during programming to reduce the number of routine tasks that must be performed. In some aspects, the system may suggest one or more code snippets that comprise code completions. The code snippets may be single or multi-token. In some aspects, the system may provide predictive editing or predictive navigation, where the system may predict edits or navigation actions based on a programmer's actions. In some aspects, the system is based on machine learning methods and is trained on past actions of programmers in a code editor.",
    "claims": "\n1. A computer-implemented method comprising:\nreceiving edits at a cursor location in a code editor from a programmer;\nupdating source code at the cursor location in response to the edits received from the programmer;\ndetecting, with a code completion system, an event to trigger code completion;\ndetermining features of the source code near the cursor location, wherein the features include one or more tokens near the cursor location;\nusing the features to search for code snippets in a team or local data set and to generate code snippets based on one or more models trained using the team or local data set;\nidentifying or generating one or more candidate code snippets;\npredictively determining a selection of one of the candidate code snippets as a selected code snippet without user input or selection; and\nautomatically modifying, with the code completion system, and without user input or selection, the source code by inputting the selected code snippet into the source code,\nwherein the one or more trained models further employ machine learning to identify actions that lead to a navigation, and learn the navigation to be performed to suggest the navigation to the programmer,\nwherein the team or local data set is specific to prior code snippet selections made by a member of the team or an individual user on the team, and\nwherein the team or local data set includes both positive and negative examples of the prior code snippet selections.\n2. The computer-implemented method of claim 1, further comprising:\nranking the one or more candidate code snippets according to a score;\nwherein the score is based at least on a calculation of relevance.\n3. The computer-implemented method of claim 2, wherein the calculation of relevance is based at least in part on one or more features of tokens near the cursor location.\n4. The computer-implemented method of claim 1, wherein using the features to search for or generate code snippets comprises inputting the features into a neural network and receiving an output from the neural network.\n5. The computer-implemented method of claim 4, wherein the neural network comprises a graph neural network.\n6. The computer-implemented method of claim 1, wherein using the features to search for or generate code snippets comprises using a lexical language model.\n7. The computer-implemented method of claim 1, wherein using the features to generate code snippets comprises using beam search.\n8. The computer-implemented method of claim 1, wherein the event is detecting that the programmer has finished typing.\n9. The computer-implemented method of claim 1, wherein one or more of the candidate code snippets is a multi-token code snippet.\n10. The computer-implemented method of claim 1, wherein each of the candidate code snippets includes a set of one or more associated keywords, the one or more associated keywords determined by analyzing one or more external codebases.\n11. The computer-implemented method of claim 1, wherein the selected candidate code snippet includes whitespace, and the whitespace is customized according to one or more inferred parameters from a codebase of the programmer.\n12. The computer-implemented method of claim 1, wherein the selected candidate code snippet includes whitespace, and the whitespace is customized according to one or more rules that are set in a development environment.\n13. The computer-implemented method of claim 1, wherein predictively determining the selection of the one of the candidate code snippets as the selected code snippet comprises determining an estimated value of each of the candidate code snippets and choosing the selected code snippet based on the estimated value.\n14. The computer-implemented method of claim 1, wherein predictively determining the selection of the one of the candidate code snippets as the selected code snippet comprises determining an estimated value of each of the candidate code snippets and automatically implementing the selected code snippet only if the estimated value of the selected code snippet is greater than a threshold.\n15. A computer-implemented method comprising:\nreceiving edits at a cursor location in a code editor from a programmer;\nupdating source code at the cursor location in response to the edits received from the programmer;\ndetecting, with a code completion, an event to trigger code completion;\ndetermining features of the source code near the cursor location, wherein the features include one or more tokens near the cursor location;\nusing the features to search for code snippets in a team or local data set and to generate code snippets based on one or more models trained using the team or local data set;\nidentifying or generating one or more candidate code snippets, wherein the one or more candidate code snippets are multi-token code snippets and the candidate code snippets contain content, the content of the candidate code snippets being adapted to a source code context at the cursor location;\npredictively determining a selection of one of the candidate code snippets as a selected code snippet without user input or selection; and\nautomatically modifying, with the code completion system, and without user input or selection, the source code by inputting the selected code snippet into the source code,\nwherein the one or more trained models further employ machine learning to identify actions that lead to a navigation, and learn the navigation to be performed to suggest the navigation to the programmer,\nwherein the team or local data set is specific to prior code snippet selections made by a member of the team or an individual user on the team, and\nwherein the team or local data set includes both positive and negative examples of the prior code snippet selections.\n16. The computer-implemented method of claim 15, further comprising:\nranking the one or more candidate code snippets according to a score;\nwherein the score is based at least on a calculation of relevance.\n17. The computer-implemented method of claim 16, wherein the calculation of relevance is based at least in part on one or more features of tokens near the cursor location.\n18. The computer-implemented method of claim 15, wherein using the features to search for or generate code snippets comprises inputting the features into a neural network and receiving an output from the neural network.\n19. The computer-implemented method of claim 18, wherein the neural network comprises a graph neural network.\n20. The computer-implemented method of claim 15, wherein using the features to search for or generate code snippets comprises using a lexical language model.\n21. The computer-implemented method of claim 15, wherein using the features to generate code snippets comprises using beam search.\n22. The computer-implemented method of claim 15, wherein the event is detecting that the programmer has finished typing.\n23. The computer-implemented method of claim 15, wherein each of the candidate code snippets includes a set of one or more associated keywords, the one or more associated keywords determined by analyzing one or more external codebases.\n24. The computer-implemented method of claim 15 wherein the selected candidate code snippet includes whitespace, and the whitespace is customized according to one or more inferred parameters from a codebase of the programmer.\n25. The computer-implemented method of claim 15, wherein the selected candidate code snippet includes whitespace, and the whitespace is customized according to one or more rules that are set in a development environment.\n26. The computer-implemented method of claim 15, wherein predictively determining the selection of the one of the candidate code snippets as the selected code snippet comprises determining an estimated value of each of the candidate code snippets and choosing the selected code snippet based on the estimated value.\n27. The computer-implemented method of claim 15, wherein predictively determining the selection of the one of the candidate code snippets as the selected code snippet comprises determining an estimated value of each of the candidate code snippets and automatically implementing the selected code snippet only if the estimated value of the selected code snippet is greater than a threshold.\n28. A computer-implemented method comprising:\nreceiving edits at a cursor location in a code editor from a programmer;\nupdating source code at the cursor location in response to the edits received from the programmer;\ndetecting, with a completion system, an event to trigger code completion;\nreceiving one or more keywords;\ndetermining features of the source code near the cursor location, wherein the features include one or more tokens near the cursor location;\nusing the features and the one or more keywords to search for code snippets in a team or local data set and to generate code snippets based on one or more models trained using the team or local data set;\nidentifying or generating one or more candidate code snippets, wherein the one or more candidate code snippets are multi-token code snippets;\npredictively determining a selection of one of the candidate code snippets as a selected code snippet without user input or selection; and\nautomatically modifying, with the code completion system, and without user input or selection, the source code by inputting the selected code snippet into the source code,\nwherein the one or more trained models further employ machine learning to identify actions that lead to a navigation, and learn the navigation to be performed to suggest the navigation to the programmer,\nwherein the team or local data set is specific to prior code snippet selections made by a member of the team or an individual user on the team, and\nwherein the team or local data set includes both positive and negative examples of the prior code snippet selections.\n29. The computer-implemented method of claim 28, further comprising:\nranking the one or more candidate code snippets according to a score;\nwherein the score is based at least on a calculation of relevance.\n30. The computer-implemented method of claim 29, wherein the calculation of relevance is based at least in part on one or more features of tokens near the cursor location.\n31. The computer-implemented method of claim 28, wherein using the features to search for or generate code snippets comprises inputting the features into a neural network and receiving an output from the neural network.\n32. The computer-implemented method of claim 30, wherein the neural network comprises a graph neural network.\n33. The computer-implemented method of claim 28, wherein using the features to search for or generate code snippets comprises using a lexical language model.\n34. The computer-implemented method of claim 28, wherein using the features to generate code snippets comprises using beam search.\n35. The computer-implemented method of claim 28, wherein the selected candidate code snippet includes whitespace, and the whitespace is customized according to one or more inferred parameters from a codebase of the programmer.\n36. The computer-implemented method of claim 28, wherein the selected candidate code snippet includes whitespace, and the whitespace is customized according to one or more rules that are set in a development environment.\n37. The computer-implemented method of claim 28, wherein predictively determining the selection of the one of the candidate code snippets as the selected code snippet comprises determining an estimated value of each of the candidate code snippets and choosing the selected code snippet based on the estimated value.\n38. The computer-implemented method of claim 28, wherein predictively determining the selection of the one of the candidate code snippets as the selected code snippet comprises determining an estimated value of each of the candidate code snippets and automatically implementing the selected code snippet only if the estimated value of the selected code snippet is greater than a threshold."
}