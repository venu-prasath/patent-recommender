{
    "patent_link": "https://patents.google.com/patent/US5452447A/en",
    "patent_id": "US5452447A",
    "title": "Method and apparatus for a caching file server",
    "abstract": "A method and apparatus are described for a caching file server (\"CFS\") system which permits end user client programs on a local node of a distributed computer system, to issue requests to read/write data to a remote file and to query/set attributes of the remote file, and to have these requests serviced by the CFS in a way which minimizes the caching resources used as well as minimizes the related network communications. The CFS establishes CFS file programs to interface with the client programs, and sets up a common CFS cache for the file attributes, which cache is kept current via a communications link to a file program in a file server at the remote node containing the file, wherein the file program automatically updates the common CFS cache whenever any attributes change. The CFS also caches the results of bind operations in order to further minimize network calls and redundant cache usage. In addition the CFS coordinates all client program requests for read/write data requests with a virtual memory manager (\"VMM\") on the local node, servicing all client programs from a single pager program in the VMM which is coupled to a cache program in the file server of the remote node. VMM page-in/page-out operations go directly to the remote file server without CFS intervention. In this manner, network communications and related processing overhead as well as memory resources may be minimized by use of the VMM for caching file data and the Common CFS cache for caching file attributes.",
    "inventors": [
        "Michael N. Nelson",
        "Yousef A. Khalidi"
    ],
    "assignee": "Sun Microsystems Inc",
    "classifications": [
        "G06F12/0806",
        "G06F12/08",
        "G06F16/172",
        "G06F16/182",
        "Y10S707/99956"
    ],
    "claims": "\n1. A computer system having a plurality of computers, each computer having a processor, a memory, and a microkernel operating system, said computer system comprising:\na. an extensible file system wherein a new file system can be added to the system without modification to the microkernel operating system;\nb. a virtual memory manager (VMM) in a computer which can cache data from said new file system; and\nc. a caching file server (CFS) resident on the computer containing the VMM, said CFS configured to cache file system attributes from said new file system which attributes said VMM cannot cache, said CFS coordinating the caching operations for clients between said CFS and said VMM so that data caching is not duplicated by said CFS and said VMM.\n2. The computer system of claim 1 wherein said CFS can also cache data related to bind operations which said VMM cannot cache.\n3. A data processing system having one or more file systems and connected at a local computer to at least one remote computer by a communications link, and said local computer having a memory and a virtual memory manager (\"VMM\"), said data processing system comprising:\na. at least one file in the one or more file systems;\nb. a microkernel operating system in said local computer thereby permitting a user to add a new file system without modification to the microkernel operating system;\nc. said VMM in said local computer comprising mechanisms for caching data from said at least one file system required by clients in said local computer, said mechanisms comprising memory in said local computer and devices for managing said caches and said memory and supplying said clients with data from said at least one file system; and\nd. a caching file server (\"CFS\") in said local computer outside of said microkernel operating system which provides caching services for the at least one file, said caching services comprising mechanisms for caching specific data within said CFS if said specific data is not cached by said VMM and mechanisms for using existing caches in said VMM for caching other data where said VMM is able to cache said other data thereby preventing any duplication of data caching in said CFS and said VMM, said CFS comprising a first file program in the CFS which recognizes requests from a first client program, to read first designated data which originates in the at least one file and which is passed to said first client through said cache in said VMM and to write second designated data which originates in said first client program and is ultimately written to said at least one file having passed through said cache in said VMM, said CFS coordinating the caching of said first and second designated data to the at least one file with the VMM in the local computer when said VMM can cache said first and second designated data, and wherein said CFS recognizes requests to query/set attributes of the at least one file and caches said file attributes in the CFS when said attributes are not cached by said VMM, said attributes of said at least one file comprising data which resides in said at least one file and which is accessible by said first client program.\nwhereby the caching services provided by the CFS and the VMM for the first client program need not be duplicated and can minimize data transfer overhead by virtue of being cached at the local computer.\n4. The data processing system as recited in claim 3 wherein said first file program in the CFS recognizes requests from a second client program, to read/write data to the at least one file and recognizes requests from the second client program to query/set attributes of the at least one file, and wherein said CFS coordinates the caching of read/write data to the at least one file with the VMM in the local computer to insure that only one cache of the read/write data is maintained for both of the first and second client programs when addressing a file, and wherein said CFS caches said file attributes in the CFS, whereby the caching services provided by the CFS and the VMM for said first and second client programs need not be duplicated and can minimize data transfer overhead by virtue of being cached at the local computer.\n5. The data processing system as recited in claim 4 wherein the CFS services both the first client program and the second client program by use of a common CFS cache.\n6. The data processing system as recited in claim 5 wherein bind requests are sent by a client program to the CFS, and wherein the CFS uses the common CFS cache to cache results of bind operations so that each new bind request is checked to determine if a binding already exists before transmitting the bind request to a remote computer.\n7. The data processing system as recited in claim 6 wherein the CFS uses the common CFS cache to cache attributes of the at least one file.\n8. The data processing system as recited in claim 7 further comprising a file program in a file server located on the at least one remote computer and a communications link between said file program and the CFS for supplying attribute data of the at least one file to the CFS.\n9. The data processing system as recited in claim 8 wherein the file program in the file server located on the at least one remote computer supplies new attribute data from the at least one file to the common CFS cache to maintain coherent file attribute data, thereby permitting the CFS to control \"set length\" and \"write\" operations to said at least one file.\n10. The data processing system as recited in claim 8 further comprising a cache program in the file server and a communications link between said cache program and a pager program in the VMM for supplying file data to and from the at least one file to the VMM, in response to page-in/page-out from the pager program in said VMM, whereby said VMM services requests from CFS programs for data from the at least one file.\n11. The data processing system as recited in claim 10 wherein said programs are object oriented programs.\n12. A data processing system having one or more file systems, one or more computers, each computer having a processor, a memory, program instructions in said memory, and a virtual memory manager (\"VMM\"), said data processing system comprising:\na. at least one file in the one or more file systems;\nb. a microkernel operating system in a local one of said one or more computers, said microkernel operating system using an extensible file system wherein new file systems can be added by a user;\nc. said VMM comprising mechanisms for caching data from said at least one file required by a client in a local computer, said mechanisms comprising memory in said local computer and devices for managing caches and said memory and supplying said client with data from said at least one file; and\nd. a caching file server (\"CFS\") in said local computer which provides caching services for the at least one file, said caching services comprising mechanisms for caching specific data within said CFS if said specific data is not cached by said VMM and mechanisms for using existing cache in said VMM for caching other data where said VMM is able to cache said other data thereby preventing any duplication of data caching in said CFS and said VMM, said CFS comprising a first file program in the CFS which recognizes requests from a first client program, to read first designated data which originates in the at least one file and which is passed to said first client through said cache in said VMM and to write second designated data which originates in said first client program and is ultimately written to said at least one file having passed through said cache in said VMM, said CFS coordinating the caching of said first and second designated data to the at least one file with the VMM when said VMM can cache said first and second designated data, and wherein said CFS recognizes requests to query/set attributes of the at least one file and caches said file attributes in the CFS when said attributes are not cached by said VMM, said attributes of said at least one file comprising data which resides in said at least one file and which is accessible by said first client program,\nwhereby the caching services provided by the CFS and the VMM for the first client program need not be duplicated and disk input/output operations can be reduced.\n13. The data processing system as recited in claim 12 wherein the file program in the CFS recognizes requests from a second client program to read/write data to the at least one file and coordinates the caching of read/ write data to the at least one file with the VMM, and recognizes requests from the second client program to query/set attributes of the at least one file and caches said file attributes in the CFS, whereby the caching services provided by the CFS and the VMM for said first and second client programs need not be duplicated, and related disk input/ output operations can be reduced.\n14. The data processing system as recited in claim 13 wherein the CFS services both the first client program and the second client program by use of a common CFS cache.\n15. The data processing system as recited in claim 14 wherein the CFS uses the common CFS cache to cache results of bind operations.\n16. The data processing system as recited in claim 15 wherein the CFS uses the common CFS cache to cache attributes of the at least one file.\n17. The data processing system as recited in claim 16 further comprising a file program in a file server containing the at least one file and a communications link between said file program and the common CFS cache for supplying attribute data of the at least one file to the CFS.\n18. The data processing system as recited in claim 17 wherein the file program in the file server supplies new attribute data from the at least one file to the common CFS cache to maintain coherent file attribute data.\n19. The data processing system as recited in claim 18 further comprising a cache program in the file server and a communications link between said cache program and a pager program in the VMM, for supplying file data to and from the at least one file, in response to page-in/page-out from the VMM, whereby said VMM services requests for data from the at least one file.\n20. The data processing system as recited in claim 19 wherein said programs are object oriented programs.\n21. A method, performed by a computer having a processor, a memory, a computer program residing in said memory, of accessing a remote file from a local computer in a data processing system having one or more file systems and connected at said local computer to at least one remote computer by a communications link, said method comprising:\na. using a microkernel operating system in said local computer;\nb. using a virtual memory manager (\"VMM\") in said local computer outside of said microkernel operating system, comprising mechanisms for caching data from said one or more file systems required by a client in said local computer, said mechanisms comprising memory in said local computer and devices for managing said cache and said memory and supplying said client with data from said one or more file systems;\nc. establishing a caching file server (\"CFS\") in said local computer which provides caching services for at least one file, said caching services comprising mechanisms for caching specific data within said CFS if said specific data is not cached by said VMM, and mechanisms for using existing caches in said VMM for caching other data where said VMM is able to cache said other data thereby preventing any duplication of data caching in said CFS and said VMM,; and\nd. establishing a file program in the CFS which recognizes requests from a first client program to read first designated data which originates in the at least one file and which is passed to said first client through said cache in said VMM and to write second designated data which originates in said first client program and is ultimately written to said at least one file having passed through said cache in said VMM, said CFS coordinating the caching of said first and second designated data to the at least one file with the VMM when said VMM can cache said first and second designated data, and wherein said CFS recognizes requests to query/set attributes of the at least one file and caches said file attributes in the CFS when said attributes are not cached by said VMM, said attributes of said at least one file comprising data which resides in said at least one file and which is accessible by said first client program,\nwhereby the caching services provided by the CFS and the VMM for the first client program need not be duplicated and related network communications traffic between the local and remote computers can be minimized.\n22. The method as recited in claim 21 further comprising the additional steps of recognizing requests from a second client program to read/ write data to the at least one file and coordinating the caching of read/write data to the at least one file with the VMM in the local computer, and recognizing requests from the second client program to query/set attributes of the at least one file and caching said file attributes in the CFS, whereby the caching services provided by the CFS and the VMM for said first and second client programs need not be duplicated and related network communications traffic between the local and remote computers can be minimized.\n23. The method as recited in claim 22 wherein the CFS services both the first client program and the second client program by use of a common CFS cache.\n24. The method as recited in claim 23 wherein the CFS uses the common CFS cache to cache results of bind operations.\n25. The method as recited in claim 24 wherein the CFS uses the common CFS cache to cache attributes of the at least one file.\n26. The method as recited in claim 25 further comprising the steps of establishing a communications link between a file program in a file server and the common CFS cache for supplying attribute data of the at least one file to the common CFS cache.\n27. The method as recited in claim 26 wherein the file program in the file server supplies new attribute data from the at least one file to the common CFS cache to maintain coherent file attribute data.\n28. The method as recited in claim 27 further comprising a step of establishing a cache program in the file server and a communications link between the cache program and a pager program in the VMM, said VMM being located on the local computer, for supplying file data to and from the at least one file, in response to page-in/page-out operations from the pager program in said VMM, whereby said VMM services requests from CFS programs for data from the at least one file.",
    "status": "Expired - Lifetime",
    "citations_own": [
        "US5113519A",
        "US5175852A",
        "US5263157A",
        "US5321841A"
    ],
    "citations_ftf": [],
    "citedby_own": [
        "US5559984A",
        "US5561799A",
        "US5594863A",
        "WO1997001765A1",
        "US5613148A",
        "US5628005A",
        "US5630067A",
        "US5682514A",
        "WO1997040441A1",
        "US5692192A",
        "US5727203A",
        "US5734898A",
        "US5737523A",
        "US5740370A",
        "US5771383A",
        "US5774660A",
        "US5778430A",
        "US5781226A",
        "US5781733A",
        "WO1998030959A1",
        "US5784459A",
        "US5787470A",
        "US5805809A",
        "US5809298A",
        "US5807449A",
        "US5832231A",
        "US5835943A",
        "US5845061A",
        "US5848246A",
        "US5862325A",
        "US5864852A",
        "US5884316A",
        "US5909540A",
        "US5918229A",
        "US5918244A",
        "US5930513A",
        "US5931919A",
        "US5933849A",
        "US5987245A",
        "US5987506A",
        "US5991795A",
        "US5999972A",
        "US6012085A",
        "US6021470A",
        "US6023711A",
        "US6026474A",
        "US6038590A",
        "US6041384A",
        "US6044438A",
        "US6044205A",
        "US6065100A",
        "US6092155A",
        "US6098096A",
        "US6122637A",
        "US6125388A",
        "US6128701A",
        "US6128648A",
        "US6157961A",
        "US6182122B1",
        "US6182077B1",
        "US6195691B1",
        "US6219676B1",
        "US6230211B1",
        "US6240461B1",
        "US6243719B1",
        "US6247149B1",
        "US6253282B1",
        "US20010005853A1",
        "US6259519B1",
        "US6266709B1",
        "US6272555B1",
        "US6304893B1",
        "US6327520B1",
        "US6330565B1",
        "US20020019936A1",
        "US6363396B1",
        "US6374329B1",
        "US6393526B1",
        "US6401090B1",
        "US6415280B1",
        "US20020095590A1",
        "US6424991B1",
        "US20020099970A1",
        "US6434598B1",
        "WO2002065342A1",
        "US6442592B1",
        "US6442601B1",
        "US20020138722A1",
        "US6473840B2",
        "US20020159455A1",
        "US6490625B1",
        "US20020188605A1",
        "US20020194484A1",
        "US20020194209A1",
        "US6502106B1",
        "US6505241B2",
        "US6516344B1",
        "US20030037022A1",
        "US20030037094A1",
        "US6529906B1",
        "US6542893B1",
        "US20030097582A1",
        "US20030115402A1",
        "US6591337B1",
        "US20030138275A1",
        "US6609159B1",
        "US6611898B1",
        "US20030172089A1",
        "US20030172088A1",
        "US6625641B1",
        "US6625617B2",
        "US6647393B1",
        "US20030212761A1",
        "US20030217081A1",
        "US20030221124A1",
        "US6662205B1",
        "US6671719B2",
        "US20040024854A1",
        "US20040025142A1",
        "US20040098415A1",
        "US6742044B1",
        "US6751616B1",
        "US20040143583A1",
        "US20040186840A1",
        "US20040186961A1",
        "US20040186861A1",
        "US6839809B1",
        "US20050091248A1",
        "US20050125486A1",
        "US6920454B1",
        "US20050160096A1",
        "US20050171927A1",
        "US6928526B1",
        "US6961726B1",
        "US6965924B1",
        "US6973650B1",
        "US20060026165A1",
        "US20060090042A1",
        "US7058696B1",
        "US20060129627A1",
        "US7072979B1",
        "US7082454B1",
        "US20060168145A1",
        "US20060182137A1",
        "US7103794B2",
        "US20060200469A1",
        "US20060206337A1",
        "US20060206332A1",
        "US20060212573A1",
        "US20060224805A1",
        "US20060224535A1",
        "US20060271692A1",
        "US20060277284A1",
        "US7155501B2",
        "US20070061699A1",
        "US20070097881A1",
        "US20070143242A1",
        "US20070143685A1",
        "US7246120B2",
        "US20070186018A1",
        "US20080022650A1",
        "US20080033976A1",
        "US7349979B1",
        "US7379962B1",
        "US7395348B1",
        "US7480941B1",
        "US20090052735A1",
        "US7529778B1",
        "US20090234968A1",
        "US7593346B2",
        "US20090319473A1",
        "US20100030871A1",
        "US20100058013A1",
        "US20100088317A1",
        "US7720997B1",
        "US7734733B1",
        "US20100145917A1",
        "US20100175064A1",
        "US7801894B1",
        "US7814131B1",
        "US7831642B1",
        "US7840682B2",
        "US7844582B1",
        "CN101217449B",
        "US7882089B1",
        "US7881208B1",
        "US7966409B1",
        "US8077604B1",
        "US8185576B2",
        "US8190513B2",
        "US8229844B2",
        "US8244864B1",
        "US8346966B1",
        "US20130044765A1",
        "US8407683B2",
        "US8407382B2",
        "US8510331B1",
        "USRE44661E1",
        "US8630942B2",
        "US8631277B2",
        "US8788579B2",
        "US8856582B2",
        "US8862660B1",
        "US9053083B2",
        "US9135284B1",
        "US9171099B2",
        "US20160077740A1",
        "US9331955B2",
        "US9442850B1",
        "US9747270B2",
        "US10372688B2",
        "US10459810B2",
        "US10630781B2",
        "US10664652B2",
        "CN112948336A",
        "US11044195B1",
        "US11561931B2"
    ],
    "citedby_ftf": [
        "US5758087A",
        "GB2317723A",
        "US5913033A",
        "US6026413A",
        "US6256712B1",
        "CN114218469B"
    ]
}