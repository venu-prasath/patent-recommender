{
    "patent_id": "US-11580261-B2",
    "title": "Automated honeypot creation within a network ",
    "assignee": "Capital One Services, Llc",
    "publication_date": "2023-02-14",
    "patent_link": "https://patents.google.com/patent/US11580261B2/en",
    "inventors": [
        "Austin Walters",
        "Jeremy Goodsitt",
        "Vincent Pham",
        "Kate Key"
    ],
    "classifications": [
        "G06F9/541",
        "G06F11/3608",
        "G06F11/3628",
        "G06F11/3636",
        "G06F11/3684",
        "G06F11/3688",
        "G06F16/215",
        "G06F16/2237",
        "G06F16/2264",
        "G06F16/2423",
        "G06F16/24568",
        "G06F16/248",
        "G06F16/254",
        "G06F16/258",
        "G06F16/283",
        "G06F16/285",
        "G06F16/288",
        "G06F16/335",
        "G06F16/35",
        "G06F16/90332",
        "G06F16/90335",
        "G06F16/9038",
        "G06F16/906",
        "G06F16/93",
        "G06F17/15",
        "G06F17/16",
        "G06F17/18",
        "G06F18/2115",
        "G06F18/213",
        "G06F18/214",
        "G06F18/2148",
        "G06F18/217",
        "G06F18/2193",
        "G06F18/22",
        "G06F18/23",
        "G06F18/24",
        "G06F18/2411",
        "G06F18/2415",
        "G06F18/285",
        "G06F18/40",
        "G06F21/552",
        "G06F21/60",
        "G06F21/6245",
        "G06F21/6254",
        "G06F30/20",
        "G06F40/117",
        "G06F40/166",
        "G06F40/20",
        "G06F8/71",
        "G06F9/54",
        "G06F9/547",
        "G06K9/6215",
        "G06K9/6218",
        "G06K9/6227",
        "G06K9/6231",
        "G06K9/6232",
        "G06K9/6253",
        "G06K9/6256",
        "G06K9/6257",
        "G06K9/6262",
        "G06K9/6265",
        "G06K9/6267",
        "G06K9/6269",
        "G06K9/6277",
        "G06N20/00",
        "G06N20/10",
        "G06N20/20",
        "G06N3/04",
        "G06N3/044",
        "G06N3/0445",
        "G06N3/045",
        "G06N3/0454",
        "G06N3/047",
        "G06N3/06",
        "G06N3/08",
        "G06N3/084",
        "G06N3/088",
        "G06N5/00",
        "G06N5/01",
        "G06N5/02",
        "G06N5/022",
        "G06N5/04",
        "G06N7/00",
        "G06N7/005",
        "G06N7/01",
        "G06Q10/04",
        "G06T11/001",
        "G06T7/194",
        "G06T7/246",
        "G06T7/248",
        "G06T7/254",
        "G06V10/768",
        "G06V10/993",
        "G06V30/194",
        "G06V30/1985",
        "H04L63/1416",
        "H04L63/1491",
        "H04L67/306",
        "H04L67/34",
        "G06T2207/10016",
        "G06T2207/10024",
        "G06T2207/20081",
        "G06T2207/20084",
        "H04N21/23412",
        "H04N21/8153"
    ],
    "abstract": "Systems and methods for managing Application Programming Interfaces (APIs) are disclosed. Systems may involve automatically generating a honeypot. For example, the system may include one or more memory units storing instructions and one or more processors configured to execute the instructions to perform operations. The operations may include receiving, from a client device, a call to an API node and classifying the call as unauthorized. The operation may include sending the call to a node-imitating model associated with the API node and receiving, from the node-imitating model, synthetic node output data. The operations may include sending a notification based on the synthetic node output data to the client device.",
    "claims": "\n1. A system comprising:\none or more memory units storing instructions; and\none or more processors that execute the instructions to perform operations comprising:\npredicting, based on call data of a call associated with a first API version, a routing path for (i) the call and (ii) one or more outputs to be derived from the call, the routing path comprising a first API node and a second API node after the first API node on the routing path;\ntranslating the call into a translated call for the first API node based on (i) the routing path indicating the call to be directed to the first API node and (ii) the first API node being associated with a second API version different from the first API version;\nobtaining, based on a processing of the translated call by the first API node, a node output indicated by the routing path as being directed to the second API node;\ncomparing the node output to an expected node output to determine whether the node output is in accordance with an API version associated with the second API node and whether the node output will cause one or more errors at the second API node; and\ntransmitting the node output to the second API node, without translating the node output for the API version associated with the second API node, in response to (i) the comparison indicating that the node output is not in accordance with the API version associated with the second API node and (ii) the comparison indicating that the node output will not cause one or more errors of a set of errors at the second API node.\n2. The system of claim 1, wherein translating the call further comprises:\nselecting, based on the call data of the call associated with the first API version and the routing path, a translation model to translate the call; and\nusing the translation model to translate the call.\n3. The system of claim 2, wherein selecting the translation model further comprises:\ndetermining, based on an API identifier included in the call data of the call associated with the first API version, the API version of the call;\ndetermining, based on the routing path, the API version of the first API node; and\nselecting, based on (i) the API version of the call and (ii) the API version of the first API node, the translation model to translate the call.\n4. The system of claim 1, wherein the operations further comprise:\nproviding training information to a translation model, the training information comprising (i) the call data, (ii) the translated call, (iii) the first API version, (iv) the second API version, (v) the routing path data, and (vi) the comparison; and\ntraining the translation model based on the provided information.\n5. The system of claim 4, wherein the operations further comprise:\npredicting, based on second call data of a second call associated with a third API version, a second routing path for the second call, wherein the second routing path comprises a third API node after the second API node;\nproviding, the second call data and the second routing path, to the translation model to determine whether the second call is in accordance with the API version of the third API node and whether the second call will cause one or more errors at the third API node; and\ntransmitting the second call to the third API node, without translating the second call, in response to (i) the determination indicating that the second call is not in accordance with the API version associated with the third API node and (ii) the determination indicating that the second call will not cause one or more errors of the set of errors at the third API node.\n6. A method, comprising:\ntranslating a call associated with a first API version into a translated call for a first API node based on the first API node being associated with a second API version different from the first API version;\nobtaining, based on a processing of the translated call by the first API node, a node output directed to a second API node;\ndetermining whether the node output is in accordance with an API version associated with the second API node and whether the node output will cause one or more errors at the second API node; and\ntransmitting the node output to the second API node in response to a determination that the node output will not cause one or more errors at the second API node, despite a determination that the node output is not in accordance with the API version associated with the second API node.\n7. The method of claim 6, wherein translating the call further comprises:\nselecting, based on call data of the call associated with the first API version and the second API version of the first API node, a translation model to translate the call; and\nusing the translation model to translate the call.\n8. The method of claim 7, wherein selecting the translation model further comprises:\ndetermining, based on an API identifier included in the call data of the call, the first API version;\ndetermining, based on the call data of the call, the second API version of the first API node; and\nselecting, based on (i) the first API version of the call and (ii) the API version of the first API node, the translation model to translate the call.\n9. The method of claim 7, wherein the translation model comprises a machine learning model.\n10. The method of claim 6, further comprising:\nproviding training information to a translation model, the training information comprising (i) call data of the call associated with the first API version, (ii) the translated call, (iii) the first API version, (iv) the second API version, (v) the determination of whether the node output is in accordance with the API version associated with the second API node, and (vi) the determination of whether the node output will cause one or more errors at the second API node; and\ntraining the translation model based on the provided information.\n11. The method of claim 10, further comprising:\nobtaining second call data of a second call associated with a third API version, the second call being directed to a third API node;\nproviding the second call data to the translation model to determine whether the second call is in accordance with the API version of the third API node and whether the second call will cause one or more errors at the third API node; and\ntransmitting the second call to the third API node, without translating the second call, in response to (i) the determination indicating that the second call is not in accordance with the API version associated with the third API node, and (ii) the determination indicating that the second call will not cause one or more errors at the third API node.\n12. The method of claim 11, further comprising:\nin response to (i) the determination indicating that the second call is not in accordance with the API version associated with the third API node, and (ii) the determination indicating that the second call will cause one or more errors at the third API node:\nproviding second training information to the translation model, the second training information comprising (i) the second call data of the second call, (ii) the third API version, (iii) the API version of the third API node, (iv) and the determination indicating that the second call is not in accordance with the API version associated with the third API node, and (v) the determination indicating that the second call will cause one or more errors at the third API node; and\ntraining the translation model based on the second training information.\n13. The method of claim 6, wherein determining whether the node output is in accordance with an API version associated with the second API node is based on a test criterion, the test criterion comprising a percent match between a schema of the node output and an expected schema of the API version of the second API node.\n14. A non-transitory computer readable media comprising instructions that, when executed by one or more processors, cause operations comprising:\ntranslating a call associated with a first API version into a translated call for a first API node based on the first API node being associated with a second API version different from the first API version;\nobtaining, based on a processing of the translated call by the first API node, a node output directed to a second API node;\ndetermining whether the node output is in accordance with an API version associated with the second API node and whether the node output will cause one or more errors at the second API node; and\ntransmitting the node output to the second API node in response to a determination that the node output will not cause one or more errors at the second API node, despite a determination that the node output is not in accordance with the API version associated with the second API node.\n15. The non-transitory computer readable media of claim 14, wherein translating the call further comprises:\nselecting, based on call data of the call associated with the first API version and the second API version of the first API node, a translation model to translate the call; and\nusing the translation model to translate the call.\n16. The non-transitory computer readable media of claim 15, wherein selecting the translation model further comprises:\ndetermining, based on an API identifier included in the call data of the call, the first API version;\ndetermining, based on the call data of the call, the second API version of the first API node; and\nselecting, based on (i) the first API version of the call and (ii) the API version of the first API node, the translation model to translate the call.\n17. The non-transitory computer readable media of claim 15, wherein the translation model comprises a machine learning model.\n18. The non-transitory computer readable media of claim 14, further causing operations comprising:\nproviding training information to a translation model, the training information comprising (i) call data of the call associated with the first API version, (ii) the translated call, (iii) the first API version, (iv) the second API version, (v) the determination of whether the node output is in accordance with the API version associated with the second API node, and (vi) the determination of whether the node output will cause one or more errors at the second API node; and\ntraining the translation model based on the provided information.\n19. The non-transitory computer readable media of claim 18, further causing operations comprising:\nobtaining second call data of a second call associated with a third API version, the second call being directed to a third API node;\nproviding the second call data to the translation model to determine whether the second call is in accordance with the API version of the third API node and whether the second call will cause one or more errors at the third API node; and\ntransmitting the second call to the third API node, without translating the second call, in response to (i) the determination indicating that the second call is not in accordance with the API version associated with the third API node, and (ii) the determination indicating that the second call will not cause one or more errors at the third API node.\n20. The non-transitory computer readable media of claim 19, further causing operations comprising:\nin response to (i) the determination indicating that the second call is not in accordance with the API version associated with the third API node, and (ii) the determination indicating that the second call will cause one or more errors at the third API node:\nproviding second training information to the translation model, the second training information comprising (i) the second call data of the second call, (ii) the third API version, (iii) the API version of the third API node, (iv) and the determination indicating that the second call is not in accordance with the API version associated with the third API node, and (v) the determination indicating that the second call will cause one or more errors at the third API node; and\ntraining the translation model based on the second training information."
}